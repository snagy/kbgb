{"version":3,"file":"pack.js","sources":["../../src/globals.js","../../src/tuning.js","../../src/coremath.js","../../src/gfx.js","../../src/boardOps.js","../../src/ui.js","../../src/base.js"],"sourcesContent":["export const globals = {\n    pickedKeys: [],\n    renderData: { keys: {}, case: {}, mats: {}, outlines: {} }\n}","export const tuning = {\n    keyDims: [18.0, 18.0],\n    switchCutout: [14.0, 14.0],\n    base1U: [19.05, 19.05],\n    bezelGap: 1.05,\n    bezelThickness: 5,\n    bezelCornerFillet: 0.5,\n    keyShape:\"square\",\n    drawCase:true,\n    drawBezel:true,\n    drawPlate:true,\n    drawPCB:true\n}","\nexport function lineLineIntersection(p0, d0, p1, d1) {\n    let det = d0.x * d1.z - d1.x * d0.z;\n    if (Math.abs(det) < BABYLON.Epsilon) // no collision\n    {\n        return null;\n    }\n\n    let prevC = p0.x * d0.x + p0.z * d0.z;\n    let nextC = p1.x * d1.x + p1.z * d1.z;\n    let intersection = new BABYLON.Vector3((d1.z * prevC - d0.z * nextC) / det, 0,\n        (d0.x * nextC - d1.x * prevC) / det);\n\n    return intersection;\n}\n\nfunction pointToLineDistSq(x0, xL, y0) {\n    let dir = y0.subtract(x0);\n    let xNormalized = xL.normalizeToNew();\n    let dot = BABYLON.Vector3.Dot(dir,xNormalized);\n\n    let nearestPoint = x0.add(xNormalized.scale(dot));\n    return y0.subtract(nearestPoint).lengthSquared();\n}\n\nexport function segmentToSegment(x0, x1, xL, xNorm, y0, y1) {\n    //let xL = x1.subtract(x0);\n    let yL = y1.subtract(y0);\n    //let xNorm = (new BABYLON.Vector3(xL.z, 0, -xL.x)).normalize();\n    let yNorm = (new BABYLON.Vector3(yL.z, 0, -yL.x)).normalize();\n\n    let result = {intersection: lineLineIntersection(x0,xNorm,y0,yNorm),\n                  type:\"unknown\"}\n    if(result.intersection) {\n        let y0Dot = BABYLON.Vector3.Dot(result.intersection.subtract(y0),yL);\n        let y1Dot = BABYLON.Vector3.Dot(result.intersection.subtract(y1),yL);\n        let x0Dot = BABYLON.Vector3.Dot(result.intersection.subtract(x0),xL);\n        let x1Dot = BABYLON.Vector3.Dot(result.intersection.subtract(x1),xL);\n        if(y0Dot > -BABYLON.Epsilon && y1Dot < BABYLON.Epsilon &&\n           x0Dot > -BABYLON.Epsilon && x1Dot < BABYLON.Epsilon) {\n            result.type = \"in_segment\";\n        } else {\n            result.type = \"off_segment\";\n        }\n    } else {\n        if(pointToLineDistSq(x0,xL,y0) < BABYLON.Epsilon) {\n            result.type = \"colinear\"\n            // check overlap?\n            // let y0In = (BABYLON.Vector3.Dot(y0.subtract(x0),xL) > -BABYLON.Epsilon && BABYLON.Vector3.Dot(y0.subtract(x1),xL) < BABYLON.Epsilon);\n            // let y1In = (BABYLON.Vector3.Dot(y1.subtract(x0),xL) > -BABYLON.Epsilon && BABYLON.Vector3.Dot(y1.subtract(x1),xL) < BABYLON.Epsilon);\n            // let x0In = (BABYLON.Vector3.Dot(x0.subtract(y0),yL) > -BABYLON.Epsilon && BABYLON.Vector3.Dot(x0.subtract(y1),yL) < BABYLON.Epsilon);\n            // let x1In = (BABYLON.Vector3.Dot(x1.subtract(y0),yL) > -BABYLON.Epsilon && BABYLON.Vector3.Dot(x1.subtract(y1),yL) < BABYLON.Epsilon);\n            // if(y0In || x0In || y1In || x1In) {\n            //     result.type = \"colinear_OVERLAPPING\"\n            // }\n        } else {\n            result.type = \"parallel\"\n        }\n    }\n    return result;\n}\n\n// only convex\nexport function isPointInPoly(p, poly) {\n    for(let i = 0; i < poly.length; i++) {\n        let point = poly[i];\n        let next = poly[(i + 1) % poly.length];\n        let nextDir = next.subtract(point).normalize();\n        let nextNorm = new BABYLON.Vector3(nextDir.z, 0, -nextDir.x);\n        let pV = p.subtract(point).normalize();\n        let d = BABYLON.Vector3.Dot(pV,nextNorm)\n        if( d > BABYLON.Epsilon) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function getRotFromNormal(norm) {\n    let t = Math.acos(norm.x);\n    if (norm.z < 0) t = 2 * Math.PI - t;\n    return t;\n}\n\nexport function getNormalFromRot(rot) {\n    return new BABYLON.Vector3(Math.cos(rot), 0, Math.sin(rot));\n}\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nfunction orient(a, b, c) {\n    var l = (a.z - c.z) * (b.x - c.x)\n    var r = (a.x - c.x) * (b.z - c.z)\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return 0\n  }\n\n// convex hull of points on the x/z plane\nexport function convexHull2d(points) {\n    var n = points.length\n\n    if (n < 3) {\n        var result = new Array(n)\n        for (var i = 0; i < n; ++i) {\n            result[i] = i\n        }\n\n        if (n === 2 &&\n            points[0].x === points[1].x &&\n            points[0].z === points[1].z) {\n            return [0]\n        }\n\n        return result\n    }\n\n    //Sort point indices along x-axis\n    var sorted = new Array(n)\n    for (var i = 0; i < n; ++i) {\n        sorted[i] = i\n    }\n    sorted.sort(function (a, b) {\n        var d = points[a].x - points[b].x\n        if (d) {\n            return d\n        }\n        return points[a].z - points[b].z\n    })\n\n    //Construct upper and lower hulls\n    var lower = [sorted[0], sorted[1]]\n    var upper = [sorted[0], sorted[1]]\n\n    for (var i = 2; i < n; ++i) {\n        var idx = sorted[i]\n        var p = points[idx]\n\n        //Insert into lower list\n        var m = lower.length\n        while (m > 1 && orient(\n                                points[lower[m - 2]],\n                                points[lower[m - 1]],\n                                p) <= 0) {\n            m -= 1\n            lower.pop()\n        }\n        lower.push(idx)\n\n        //Insert into upper list\n        m = upper.length\n        while (m > 1 && orient(\n            points[upper[m - 2]],\n            points[upper[m - 1]],\n            p) >= 0) {\n            m -= 1\n            upper.pop()\n        }\n        upper.push(idx)\n    }\n\n    //Merge lists together\n    var result = new Array(upper.length + lower.length - 2)\n    var ptr = 0\n    for (var i = 0, nl = lower.length; i < nl; ++i) {\n        result[ptr++] = lower[i]\n    }\n    for (var j = upper.length - 2; j > 0; --j) {\n        result[ptr++] = upper[j]\n    }\n\n    let pList = [];\n    for( const i of result ) {\n        pList.unshift(points[i])\n    }\n\n    //Return result\n    return pList\n}\n\n// offset is + to the left, - to right (right won't work right now)\nexport function genArrayFromOutline(outline, offset, fillets, close, segments) {\n    let outPoints = [];\n    //todo turn fillets into array if it's just a value\n    if (!segments) {\n        segments = 4;\n    }\n\n    for (let i = 0; i < outline.length; i++) {\n        let point = outline[i];\n        let next = outline[(i + 1) % outline.length];\n        let prev = outline[(i - 1 + outline.length) % outline.length];\n        let nextDir = next.subtract(point).normalize();\n        let prevDir = point.subtract(prev).normalize();\n        let nextNorm = new BABYLON.Vector3(nextDir.z, 0, -nextDir.x);\n        let prevNorm = new BABYLON.Vector3(prevDir.z, 0, -prevDir.x);\n        let inPoint = point.add(prevNorm.scale(offset));\n        let outPoint = point.add(nextNorm.scale(offset));\n\n        let intersection = lineLineIntersection(inPoint, prevNorm,\n            outPoint, nextNorm);\n        if (intersection === null) {\n            outPoints.push(inPoint);\n            outPoints.push(outPoint);\n            continue;\n        }\n\n        if (!fillets) {\n            outPoints.push(intersection);\n        }\n        else {\n            let fillet = fillets;\n            let flip = BABYLON.Vector3.Dot(prevNorm,nextDir) > 0;\n            if( flip ) {\n                fillet = -fillet;\n            }\n            let filletCenter = lineLineIntersection(inPoint.add(prevNorm.scale(-fillet)), prevNorm,\n                outPoint.add(nextNorm.scale(-fillet)), nextNorm);\n\n\n            let startRot = getRotFromNormal(prevNorm)+ Math.PI * 2;\n            let endRot = getRotFromNormal(nextNorm)+ Math.PI * 2;\n            if(flip) {\n                startRot += Math.PI;\n                endRot += Math.PI;\n                fillet = -fillet;\n                if (startRot < endRot) {\n                    startRot += Math.PI * 2;\n                }\n            }\n            else if (endRot < startRot) {\n                endRot += Math.PI * 2;\n            }\n            let rotStep = (endRot - startRot) / segments;\n            for (let i = 0; i <= segments; i++) {\n                outPoints.push(filletCenter.add(getNormalFromRot(startRot + rotStep * i).scale(fillet)));\n            }\n        }\n    }\n\n    if (close) {\n        outPoints.push(outPoints[0]);\n    }\n\n    return outPoints;\n}","import {globals} from './globals.js'\nimport {tuning} from './tuning.js'\n\nexport function createKeyMaterial(name,color) {\n    let mats = globals.renderData.mats;\n    mats[name] = new BABYLON.PBRMetallicRoughnessMaterial(name, globals.scene);\n    mats[name].metallic = 0;\n    mats[name].roughness = 0.6;\n    mats[name].baseColor = color;\n    mats[name].environmentTexture = globals.hdrTexture;\n}\n\nexport function createMaterials() {\n    let mats = globals.renderData.mats;\n    let name = \"keySel\";\n    mats[name] = new BABYLON.StandardMaterial(name, globals.scene);\n    mats[name].diffuseColor = new BABYLON.Color3(0, 0, 0);\n    mats[name].emissiveColor = new BABYLON.Color3(1, 0, 0);\n    mats[name].specularColor = new BABYLON.Color3(0, 0, 0);\n\n    let caseMatName = \"case\";\n    mats[caseMatName] = new BABYLON.PBRMetallicRoughnessMaterial(caseMatName, globals.scene);\n    mats[caseMatName].metallic = 1;\n    mats[caseMatName].roughness = 0.8;\n    mats[caseMatName].baseColor = new BABYLON.Color3(0.6, 0.6, 0.6);\n    mats[caseMatName].environmentTexture = globals.hdrTexture;\n\n    let plateMatName = \"plate\";\n    mats[plateMatName] = new BABYLON.PBRMetallicRoughnessMaterial(plateMatName, globals.scene);\n    mats[plateMatName].metallic = 1;\n    mats[plateMatName].roughness = 0.2;\n    mats[plateMatName].baseColor = new BABYLON.Color3(0.5, 0.5, 0.5);\n    mats[plateMatName].environmentTexture = globals.hdrTexture;\n\n    let pcbMatName = \"fr4\";\n    mats[pcbMatName] = new BABYLON.PBRMetallicRoughnessMaterial(pcbMatName, globals.scene);\n    mats[pcbMatName].metallic = 0;\n    mats[pcbMatName].roughness = 0.2;\n    mats[pcbMatName].baseColor = new BABYLON.Color3(41/255, 110/255, 1/255);\n    mats[pcbMatName].environmentTexture = globals.hdrTexture;\n\n    createKeyMaterial(\"key\", new BABYLON.Color3(0.9, 0.9, 0.9));\n}\n\nexport function snapCamera() {\n    const bd = globals.boardData;\n    globals.camera.setTarget(new BABYLON.Vector3(bd.layout.bounds.mins[0] + (bd.layout.bounds.maxs[0] - bd.layout.bounds.mins[0]) / 2.0,\n        0,\n        bd.layout.bounds.mins[1] + (bd.layout.bounds.maxs[1] - bd.layout.bounds.mins[1]) / 2.0));\n    globals.camera.alpha = -Math.PI / 2;\n    globals.camera.beta = 0;\n    globals.camera.radius = 300;\n}\n\nfunction createScene() {\n    const engine = globals.engine;\n\n    // create a basic BJS Scene object\n    var scene = new BABYLON.Scene(engine);\n\n    var camera = new BABYLON.ArcRotateCamera(\"Camera\", -Math.PI / 2, 0, 10, new BABYLON.Vector3(0, 0, 0), scene);\n\n    // target the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n\n    // attach the camera to the canvas\n    camera.attachControl(globals.canvas, false);\n\n    globals.camera = camera;\n\n    // create a basic light, aiming 0,1,0 - meaning, to the sky\n    // var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0, 1, 0), scene);\n    // // Default intensity is 1. Let's dim the light a small amount\n    // light.intensity = 0.7;\n    var skyboxPath = \"assets/environment.dds\";\n    globals.hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(skyboxPath, scene);\n    globals.currentSkybox = scene.createDefaultSkybox(globals.hdrTexture, true, (scene.activeCamera.maxZ - scene.activeCamera.minZ) / 2, 0.3);\n\n    // return the created scene\n    return scene;\n}\n\nexport function init() {\n    // get the canvas DOM element\n    globals.canvas = document.getElementById('renderCanvas');\n\n    // load the 3D engine\n    globals.engine = new BABYLON.Engine(globals.canvas, true);\n\n    // call the createScene function\n    globals.scene = createScene();\n}\n","import {globals} from './globals.js'\nimport {tuning} from './tuning.js'\nimport * as coremath from './coremath.js'\nimport * as gfx from './gfx.js'\n\nexport function refreshOutlines() {\n    let kRD = globals.renderData.keys;\n    let oRD = globals.renderData.outlines;\n    let mats = globals.renderData.mats;\n\n    for (const [k, o] of Object.entries(oRD)) {\n        globals.scene.removeMesh(o);\n    }\n\n    for (const id of globals.pickedKeys) {\n        if (!kRD[id]) {\n            console.log(\"picked nonexistant key\");\n        }\n        else {\n            let rd = kRD[id];\n\n            oRD[id] = BABYLON.MeshBuilder.CreateRibbon(id + \"outline\",\n                {\n                    pathArray: [coremath.genArrayFromOutline(rd.outline, 0.1, 0.1, true),\n                        coremath.genArrayFromOutline(rd.outline, 0.5, 0.5, true)]\n                }, globals.scene);\n            oRD[id].material = mats[\"keySel\"];\n            oRD[id].translate(new BABYLON.Vector3(0, 10.5, 0), 1, BABYLON.Space.LOCAL);\n        }\n    }\n}\n\nfunction getPlateCutsWithStabs(width,height,kXform,plateCuts,pcbBounds) {\n    let switchCutDims = [tuning.switchCutout[0]*0.5, tuning.switchCutout[1]*0.5];\n    let sXform = kXform;\n\n    // wack ass cherry 6u spacebar\n    if(width == 6) {\n        sXform = BABYLON.Matrix.Translation(9.525, 0, 0).multiply(sXform)\n    }\n    plateCuts.push([\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-switchCutDims[0], 0, -switchCutDims[1]), sXform),\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(switchCutDims[0], 0, -switchCutDims[1]), sXform),\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(switchCutDims[0], 0, switchCutDims[1]), sXform),\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-switchCutDims[0], 0, switchCutDims[1]), sXform)\n    ]);\n\n    // pcb footprint of a hotswap switch: x +/- 9 y +/- 6.75\n    // enc: 6.75, 8,5\n    let keyPCBBounds = [9,6.75];\n    pcbBounds.push([\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keyPCBBounds[0], 0, -keyPCBBounds[1]), sXform),\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keyPCBBounds[0], 0, -keyPCBBounds[1]), sXform),\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keyPCBBounds[0], 0, keyPCBBounds[1]), sXform),\n        BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keyPCBBounds[0], 0, keyPCBBounds[1]), sXform)\n    ]);\n\n    let span = width;\n    if(height >= 1.75) {\n        span = height;\n        sXform = BABYLON.Matrix.RotationY(Math.PI / 2.0).multiply(sXform);\n    }\n\n    let stabCutDims = [7*0.5,15*0.5];\n    if( span >= 2 ) {\n        let stabOffsetXL = 0.0;\n        let stabOffsetXR = 0.0;\n        if(span <= 2.75) {\n            stabOffsetXL = stabOffsetXR = 11.938;\n        }\n        else if(span <= 3.0) {\n            stabOffsetXL = stabOffsetXR = 19.05;\n        }\n        else if(span <= 4) {\n            stabOffsetXL = stabOffsetXR = 28.575;\n        }\n        else if(span <= 4.5) {\n            stabOffsetXL = stabOffsetXR = 34.671;\n        }\n        else if(span <= 5.5) {\n            stabOffsetXL = stabOffsetXR = 42.8625;\n        }\n        else if(span == 6) {\n            // cherry 6u again\n            stabOffsetXL = 57.15;\n            stabOffsetXR = 38.1\n        }\n        else if(span <= 6) {\n            stabOffsetXL = stabOffsetXR = 47.5;\n        }\n        else if(span <= 6.25) {\n            stabOffsetXL = stabOffsetXR = 50;\n        }\n        else if(span <= 6.5) {\n            stabOffsetXL = stabOffsetXR = 52.38;\n        }\n        else if(span <= 7) {\n            stabOffsetXL = stabOffsetXR = 57.15;\n        }\n        else {\n            stabOffsetXL = stabOffsetXR = 66.675;\n        }\n\n        let stabXforms = [BABYLON.Matrix.Translation(-stabOffsetXL, 0, -2).multiply(sXform),\n                          BABYLON.Matrix.Translation( stabOffsetXR, 0, -2).multiply(sXform)];\n        let stabCut = [new BABYLON.Vector3(-stabCutDims[0], 0, -stabCutDims[1]),\n                       new BABYLON.Vector3(stabCutDims[0], 0, -stabCutDims[1]),\n                       new BABYLON.Vector3(stabCutDims[0], 0, stabCutDims[1]),\n                       new BABYLON.Vector3(-stabCutDims[0], 0, stabCutDims[1])];\n\n        // stab foot = 4 wide x 19 h\n        let stabPCBFootDims = [3,9.5];\n        let stabFoot = [new BABYLON.Vector3(-stabPCBFootDims[0], 0, -6),\n        new BABYLON.Vector3(stabPCBFootDims[0], 0, -6),\n        new BABYLON.Vector3(stabPCBFootDims[0], 0, 13),\n        new BABYLON.Vector3(-stabPCBFootDims[0], 0, 13)];\n\n        for(let j = 0; j < stabXforms.length; j++) {\n            let xformedCut = [];\n            for(let i = 0; i < stabCut.length; i++) {\n                xformedCut.push(BABYLON.Vector3.TransformCoordinates(stabCut[i],stabXforms[j]));\n            }\n            plateCuts.push(xformedCut);\n\n            let xformedPCBBounds = [];\n            for(let i = 0; i < stabFoot.length; i++) {\n                xformedPCBBounds.push(BABYLON.Vector3.TransformCoordinates(stabFoot[i],stabXforms[j]));\n            }\n            pcbBounds.push(xformedPCBBounds);\n        }\n    }\n}\n\nexport function refreshLayout() {\n    const scene = globals.scene;\n    const bd = globals.boardData;\n\n    let mins = [100000.0, 100000.0]\n    let maxs = [-100000.0, -100000.0];\n\n    let bezelHoles = [];\n\n    let kRD = globals.renderData.keys;\n    // clear the renderdata (cache this later?)\n    for(const [id, rd] of Object.entries(kRD)) {\n        if (rd.keycap) {\n            scene.removeMesh(rd.keycap);\n        }\n    }\n    kRD = globals.renderData.keys = [];\n    \n    let outlines = [];\n\n    let kgID = 0;\n    for (const [id, k] of Object.entries(bd.layout.keys)) {\n        // console.log(k);\n\n        if (!kRD[id]) {\n            kRD[id] = {keyGroupId:null,id:id,\n                        mins:[100000.0, 100000.0], maxs:[-100000.0, -100000.0],\n                        bezelMins:[100000.0, 100000.0], bezelMaxs:[-100000.0, -100000.0],\n                        overlappingKeys:{}\n                    };\n        }\n        let rd = kRD[id];\n\n        let keycapDim = [(tuning.keyDims[0] + tuning.base1U[0] * (k.width - 1)) / 2,\n        (tuning.keyDims[1] + tuning.base1U[1] * (k.height - 1)) / 2];\n\n        // let uDim = [(tuning.base1U[0] + tuning.base1U[0] * (k.width - 1)) / 2,\n        // (tuning.base1U[1] + tuning.base1U[1] * (k.height - 1)) / 2];\n\n        let kPos = [k.x * tuning.base1U[0] + keycapDim[0],\n        -(k.y * tuning.base1U[1] + keycapDim[1])]\n        let kPosition = new BABYLON.Vector3(kPos[0], 0, kPos[1]);\n        let kXform = BABYLON.Matrix.Identity();\n        kXform = kXform.multiply(BABYLON.Matrix.Translation(kPos[0], 0, kPos[1]));\n        if (k.rotation_angle != 0) {\n            kXform = kXform.multiply(BABYLON.Matrix.Translation(-k.rotation_x * tuning.base1U[0], 0, k.rotation_y * tuning.base1U[1]));\n            kXform = kXform.multiply(BABYLON.Matrix.RotationY(k.rotation_angle * Math.PI / 180.0))\n            kXform = kXform.multiply(BABYLON.Matrix.Translation(k.rotation_x * tuning.base1U[0], 0, -k.rotation_y * tuning.base1U[1]));\n        }\n        rd.outline = [\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0], 0, -keycapDim[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0], 0, -keycapDim[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0], 0, keycapDim[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0], 0, keycapDim[1]), kXform)\n        ];\n\n        rd.pcbBoxes = [];\n        rd.switchCut = [];\n\n        getPlateCutsWithStabs(k.width,k.height,kXform,rd.switchCut,rd.pcbBoxes);\n\n        if (rd.keycap) {\n            scene.removeMesh(rd.keycap);\n        }\n        if (tuning.keyShape) {\n            rd.keycap = BABYLON.MeshBuilder.CreatePolygon(id, { shape: rd.outline, depth: 7, updatable: false }, scene);\n            rd.keycap.translate(new BABYLON.Vector3(0, 10.5, 0), 1, BABYLON.Space.LOCAL);\n    \n            if(k.matName && globals.renderData.mats[k.matName]) {\n                rd.keycap.material = globals.renderData.mats[k.matName];\n            }\n        }\n\n        rd.bezelHole = [\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0] - tuning.bezelGap, 0, -keycapDim[1] - tuning.bezelGap), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0] + tuning.bezelGap, 0, -keycapDim[1] - tuning.bezelGap), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0] + tuning.bezelGap, 0, keycapDim[1] + tuning.bezelGap), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0] - tuning.bezelGap, 0, keycapDim[1] + tuning.bezelGap), kXform)\n        ];\n        bezelHoles.push(rd.bezelHole);\n\n        for (let p of rd.bezelHole) {\n            rd.bezelMins[0] = Math.min(rd.bezelMins[0], p.x);\n            rd.bezelMaxs[0] = Math.max(rd.bezelMaxs[0], p.x);\n            rd.bezelMins[1] = Math.min(rd.bezelMins[1], p.z);\n            rd.bezelMaxs[1] = Math.max(rd.bezelMaxs[1], p.z);\n        }\n\n        for (let p of rd.outline) {\n            rd.mins[0] = Math.min(rd.mins[0], p.x);\n            rd.maxs[0] = Math.max(rd.maxs[0], p.x);\n            rd.mins[1] = Math.min(rd.mins[1], p.z);\n            rd.maxs[1] = Math.max(rd.maxs[1], p.z);\n        }\n        mins[0] = Math.min(rd.mins[0], mins[0]);\n        maxs[0] = Math.max(rd.maxs[0], maxs[0]);\n        mins[1] = Math.min(rd.mins[1], mins[1]);\n        maxs[1] = Math.max(rd.maxs[1], maxs[1]);\n\n        let checkOverlap = function(k1, rd1, k2, rd2) {\n            if( rd1.bezelMins[0]+BABYLON.Epsilon > rd2.bezelMaxs[0] || rd2.bezelMins[0]+BABYLON.Epsilon > rd1.bezelMaxs[0] ||\n                rd1.bezelMins[1]+BABYLON.Epsilon > rd2.bezelMaxs[1] || rd2.bezelMins[1]+BABYLON.Epsilon > rd1.bezelMaxs[1] ) {\n                return false\n            }\n\n            // see if any of the lines bisect the other rect  (since it's a rect, we know each line is actually a normal of the previous)\n\n            let checkIntersection = (pRD, oRD) => {\n                for(let iP = 0; iP < pRD.bezelHole.length; iP++) {\n                    let line = pRD.bezelHole[(iP+1)%pRD.bezelHole.length].subtract(pRD.bezelHole[iP]);\n                    let allLess = true;\n                    let allMore = true;\n                    for(let oP = 0; oP < oRD.bezelHole.length; oP++) {\n                        let dot = BABYLON.Vector3.Dot(line,oRD.bezelHole[oP].subtract(pRD.bezelHole[iP]));\n                        allMore &= dot > -BABYLON.Epsilon;\n                        allLess &= dot < BABYLON.Epsilon;\n                    }\n    \n                    if( allMore || allLess ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            let confirmedIntersection = checkIntersection(rd1,rd2);\n            if(!confirmedIntersection) {\n                confirmedIntersection = checkIntersection(rd2,rd1);\n            }\n\n            if(confirmedIntersection) {\n                rd1.overlappingKeys[rd2.id] = rd2;\n                rd2.overlappingKeys[rd1.id] = rd1;\n                if(rd1.keyGroupId && rd2.keyGroupId) {\n                    // merge\n                    // console.log(`merging kgIDs ${rd1.keyGroupId} and ${rd2.keyGroupId}`);\n                    let pKG = rd1.keyGroupId;\n                    let oKG = rd2.keyGroupId;\n                    for(const [otherId, oRD] of Object.entries(kRD)) {\n                        if(oRD.keyGroupId == oKG) {\n                            oRD.keyGroupId = pKG;\n                        }\n                    }\n                }\n                else if(rd1.keyGroupId) {\n                    rd2.keyGroupId = rd1.keyGroupId;\n                }\n                else if(rd2.keyGroupId) {\n                    rd1.keyGroupId = rd2.keyGroupId;\n                }\n                else {\n                    rd1.keyGroupId = rd2.keyGroupId = kgID++;\n                }\n            }\n        }\n\n        for (const [otherId, otherRD] of Object.entries(kRD)) {\n            if(otherId == id) {\n                continue;\n            }\n\n            let otherKey = bd.layout.keys[otherId];\n            checkOverlap(k,rd,otherKey,otherRD);\n        }\n\n        if(!rd.keyGroupId) {\n            rd.keyGroupId = kgID++;\n        }\n    }\n\n    bd.layout.bounds = { mins: mins, maxs: maxs };\n\n    refreshOutlines();\n}\n\nfunction getCombinedOutlineFromRDGroup(KG) {\n    for( const rd of KG ) {\n        rd.outlineLines = [];\n        rd.parsedOutlineLines = {};\n        for(let p = 0; p < rd.bezelHole.length; p++) {\n            let lStart = rd.bezelHole[p];\n            let lEnd = rd.bezelHole[(p+1)%rd.bezelHole.length]\n            rd.outlineLines.push([lStart,lEnd]);\n        }\n    }\n\n\n    let maxOverlapSq = BABYLON.Epsilon;\n\n    let overlapFunc = (primeL, primeLen, otherLen, line, norm, distBetween, lineArray, parseArray) => {\n        if(!parseArray[primeL]) {\n            let primeToOtherNear = Math.max(distBetween - otherLen,0) / primeLen;\n            let primeToOtherFar = distBetween / primeLen;\n            if(primeToOtherNear < 1 - BABYLON.Epsilon && primeToOtherFar > BABYLON.Epsilon) {\n                // kill O and replace it with any remaining line segments\n                //parseArray[primeL] = true;\n                if (primeToOtherNear > BABYLON.Epsilon) {\n                    lineArray.push([line[0],line[0].add(norm.scale(distBetween - otherLen))]);\n                }\n                if (primeToOtherFar < 1 - BABYLON.Epsilon) {\n                    lineArray.push([line[0].add(norm.scale(distBetween)), line[1]]);\n                }\n                lineArray.splice(primeL,1);\n            }\n        }\n    }\n    // clip any overlapping parallel lines against each other (cancel if they face each other)\n    for( const rd of KG ) {\n        // if(true) break;\n        rd.visitedForOutline = true;\n\n        for( const [oId,otherRD] of Object.entries(rd.overlappingKeys) ) {\n            //if(otherRD.visitedForOutline) continue;\n            for(let iL = rd.outlineLines.length-1; iL >= 0; iL--) {\n                let lL = rd.outlineLines[iL];\n                let lDir = lL[1].subtract(lL[0]);\n                let lLen = lDir.length()\n                if(lLen < BABYLON.Epsilon) continue;\n                let lineNorm = lDir.normalizeFromLength(lLen);\n\n                for( let jL = otherRD.outlineLines.length-1; jL > 0; jL-- ) {\n                    let oL = otherRD.outlineLines[jL];\n                    let oDir = oL[1].subtract(oL[0]);\n                    let oLen = oDir.length();\n                    if(oLen < BABYLON.Epsilon ) continue;\n                    let oLNorm = oDir.normalizeFromLength(oLen);\n                    let lineDot = BABYLON.Vector3.Dot(oLNorm,lineNorm)\n                    if( Math.abs(lineDot) > 1-BABYLON.Epsilon) {\n                        let diff = lL[0].subtract(oL[0]);\n                        if(diff.lengthSquared() < BABYLON.Epsilon) {\n                            let d2 = lL[1].subtract(oL[1]);\n                            let d2ls = d2.lengthSquared();\n                            if(d2ls< BABYLON.Epsilon || d2ls > lLen*lLen) {\n                                rd.outlineLines.splice(iL,1);\n                                break;\n                            } else {\n                                lL[0] = oL[1];\n                                break;\n                            }\n                        }\n                        let dd = BABYLON.Vector3.Dot(diff, oLNorm);\n                        let projPoint = oL[0].add(oLNorm.scale(dd))\n                        if( projPoint.subtract(lL[0]).lengthSquared() < maxOverlapSq) {\n                            // check to see if these two are facing away from each other\n                            if(lineDot < BABYLON.Epsilon-1) {\n                                // at this point, dd is the distance between the two starting points (which are facing each other) \n                                // erase the overlapping portion of each line\n                                // O ------------> olen\n                                //      llen <--------- L\n                                // O <----------------> dd\n                                overlapFunc(jL,oLen,lLen,oL,oLNorm,dd,otherRD.outlineLines,otherRD.parsedOutlineLines);\n                                overlapFunc(iL,lLen,oLen,lL,lineNorm,dd,rd.outlineLines,rd.parsedOutlineLines);\n                            }\n                            else if( lineDot > 1-BABYLON.Epsilon ) {\n                                if( dd > BABYLON.Epsilon ) {\n                                    // O -------->\n                                    //        L ---------->\n                                    // O <---> dd\n                                    // consume L\n                                    let overlapDist = oLen - dd;\n                                    if(!rd.parsedOutlineLines[iL]) {\n                                        if(overlapDist > BABYLON.Epsilon) {\n                                            // console.log(`trimming A ${rd.id} ${iL} vs ${oId} ${jL} len ${lLen} ov ${overlapDist}`)\n                                            if(lLen - overlapDist < BABYLON.Epsilon)\n                                            {\n                                                // console.log(`SPLICE`);\n                                                rd.outlineLines.splice(iL,1);\n                                                break;\n                                            }\n                                            // rd.parsedOutlineLines[iL] = true;\n                                            // rd.outlineLines.push([lL[0].add(lineNorm.scale(overlapDist)),lL[1]]);\n                                            lL[0] = lL[0].add(lineNorm.scale(overlapDist));\n                                        }\n                                    }\n                                }\n                                if( dd < BABYLON.Epsilon ) {\n                                    // L -------->\n                                    //        O ---------->\n                                    // L <---> -dd\n                                    // consume L\n                                    let d = -dd;\n                                    if(!rd.parsedOutlineLines[iL]) {\n                                        if(d < lLen - BABYLON.Epsilon) {\n                                            // console.log(`trimming B ${rd.id} ${iL} vs ${oId} ${jL} d ${d}`)\n                                            if(d < BABYLON.Epsilon)\n                                            {\n                                                // console.log(`SPLICE`);\n                                                rd.outlineLines.splice(iL,1);\n                                                break;\n                                            }\n                                            // rd.parsedOutlineLines[iL] = true;\n                                            // rd.outlineLines.push([lL[0],lL[0].add(lineNorm.scale(d))]);\n                                            lL[1] = lL[0].add(lineNorm.scale(d));\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    for( const rd of KG ) {\n        // if(true) break;\n        for( const [oId,otherRD] of Object.entries(rd.overlappingKeys) ) {\n            for(let iL = rd.outlineLines.length - 1; iL >= 0; iL--) {\n                let l = rd.outlineLines[iL];\n                let lL = l[1].subtract(l[0]);\n                let lNorm = new BABYLON.Vector3(lL.z,0,-lL.x).normalize();\n\n                let intersections = [];\n                let colinear = false;\n                for(let iOP = 0; iOP < otherRD.bezelHole.length; iOP++) {\n                    let segRes = coremath.segmentToSegment(l[0], l[1], lL, lNorm, otherRD.bezelHole[iOP], otherRD.bezelHole[(iOP+1)%otherRD.bezelHole.length]);\n                    if(segRes.type == \"in_segment\" && segRes.intersection) {\n                        // console.log(`intersecting ${rd.id} line ${iL} with ${otherRD.id} line ${iOP}` )\n                        // console.log(l)\n                        intersections.push(segRes.intersection);\n                    }\n                    else if(segRes.type == \"colinear\") {\n                        // console.log(`bailing colinear ${rd.id} line ${iL} with ${otherRD.id} line ${iOP}`);\n                        // we're colinear with an edge, so we don't have anything to clip with this box\n                        colinear = true;\n                        break;\n                    }\n                }\n                if(colinear) continue;\n\n                let isStartInPoly = coremath.isPointInPoly(l[0],otherRD.bezelHole);\n                let isEndInPoly = coremath.isPointInPoly(l[1],otherRD.bezelHole);\n\n                // console.log(`${rd.id} line ${iL} with ${otherRD.id} startIn ${isStartInPoly} end ${isEndInPoly} ${intersections.length}`);\n                if(isStartInPoly && isEndInPoly && intersections.length <= 1) {\n                    // both are inside the poly, just remove the line\n                    // console.log(`removing line ${iL} from ${rd.id}`);\n                    rd.outlineLines.splice(iL, 1);\n                }\n                else if(intersections.length == 1) {\n                    // console.log(`splitting (one intersection) line ${iL} from ${rd.id}`);\n                    // console.log(`start ${isStartInPoly} end ${isEndInPoly}`);\n                    if(isStartInPoly) {\n                        l[0] = intersections[0];\n                    } else {\n                        l[1] = intersections[0];\n                    }\n                    if(l[1].subtract(l[0]).lengthSquared() < BABYLON.Epsilon) {\n                        rd.outlineLines.splice(iL, 1);\n                    }\n                }\n                else if(intersections.length > 1) {\n                    // console.log(`multisplit line ${iL} from ${rd.id}`);\n                    // console.log(`${rd.id} l is ${l[0]} ${l[1]}`);\n                    intersections.sort((a,b) => (a.subtract(l[0]).lengthSquared() - b.subtract(l[0]).lengthSquared()))\n                    let tmp = l[1];\n                    l[1] = intersections[0];\n                    if(l[1].subtract(l[0]).lengthSquared() < BABYLON.Epsilon) {\n                        // console.log(\"skipping start length due to shortness\");\n                        rd.outlineLines.splice(iL, 1);\n                    }\n                    // console.log(`${rd.id} start is ${l[0]} ${l[1]}`);\n                    for(let i = 2; i < intersections.length; i+=2) {\n                        if( intersections[i-1].subtract(intersections[i]).lengthSquared() > BABYLON.Epsilon) {\n                            rd.outlineLines.push([intersections[i-1],intersections[i]]);\n                        } \n                        // console.log(`${rd.id} mid is ${intersections[i-1]} ${intersections[i]}`);\n                    }\n                    if(intersections.length % 2 == 0) {\n                        if( intersections[intersections.length-1].subtract(tmp).lengthSquared() > BABYLON.Epsilon) {\n                            rd.outlineLines.push([intersections[intersections.length-1],tmp]);\n                            // console.log(`${rd.id} end is ${intersections[intersections.length-1]} ${tmp}`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    let parsedLines = [];\n    let nextKeyRd = null;\n    let nextLineIndex = -1;\n    let invertNextLine = false;\n    // pick a line at random.  this could actually pick something on an interior island so we should probably\n    // run the loop gen algorithm until all the lines are used up and then pick the polygon with the largest area\n    for( const rd of KG ) {\n        for(let iL = 0; iL < rd.outlineLines.length; iL++) {\n            if(!rd.parsedOutlineLines[iL]) {\n                nextKeyRd = rd;\n                nextLineIndex = iL;\n                break;\n            }\n        }\n        if(nextLineIndex >= 0) break;\n    }\n    \n    let outline = [];\n    // finally, walk through the list of available outline lines and pick the closest end point for the next line\n    while(nextKeyRd != null && nextLineIndex >= 0) {\n        nextKeyRd.parsedOutlineLines[nextLineIndex] = true;\n        let prevLine = nextKeyRd.outlineLines[nextLineIndex];\n        if(invertNextLine) {\n            let tmp = prevLine[0];\n            prevLine[0] = prevLine[1];\n            prevLine[1] = tmp;\n        }\n        // console.log(`key rd ${nextKeyRd.id} line idx ${nextLineIndex} s ${prevLine[0]} e ${prevLine[1]}`)\n        \n        outline.push(prevLine[0]);\n\n        parsedLines.push(prevLine);\n        nextLineIndex = -1;\n        let nextDistSq = 20.0\n\n        let checkNext = (n,nRd,i) => {\n            let newDistSq = prevLine[1].subtract(n[0]).lengthSquared();\n            if(newDistSq < nextDistSq) {\n                nextDistSq = newDistSq;\n                nextKeyRd = nRd;\n                nextLineIndex = i;\n                invertNextLine = false;\n            }\n\n            newDistSq = prevLine[1].subtract(n[1]).lengthSquared();\n            if(newDistSq < nextDistSq) {\n                nextDistSq = newDistSq;\n                nextKeyRd = nRd;\n                nextLineIndex = i;\n                invertNextLine = true;\n            }\n        }\n        \n        for(let iL = 0; iL < nextKeyRd.outlineLines.length; iL++) {\n            if(!nextKeyRd.parsedOutlineLines[iL]) {\n                checkNext(nextKeyRd.outlineLines[iL],nextKeyRd,iL);\n            }\n        }\n\n        for( const [oId,otherRD] of Object.entries(nextKeyRd.overlappingKeys) ) {\n            for( let jL = 0; jL < otherRD.outlineLines.length; jL++ ) {\n                if(otherRD.parsedOutlineLines[jL]) continue;\n\n                checkNext(otherRD.outlineLines[jL],otherRD,jL);\n            }\n        }\n    }\n    return outline;\n}\n\n\nexport function refreshCase() {\n    const scene = globals.scene;\n    const bd = globals.boardData;\n    const kRD = globals.renderData.keys;\n    const mats = globals.renderData.mats;\n\n    if(bd.caseType == \"convex\") {\n        let kPs = [];\n        for( let [id,rd] of Object.entries(kRD) ) {\n            for( let p of rd.outline ) {\n                kPs.push(p)\n            }\n        }\n        bd.outline = coremath.convexHull2d(kPs);\n\n        if(bd.forceSymmetrical) {\n            let midPoint = (bd.layout.bounds.maxs[0] - bd.layout.bounds.mins[0]) * 0.5 + bd.layout.bounds.mins[0];\n            for(let oP of bd.outline) {\n                kPs.push(new BABYLON.Vector3(midPoint - (oP.x - midPoint), oP.y, oP.z));\n            }\n            bd.outline = coremath.convexHull2d(kPs);\n        }\n    }\n    else\n    {\n        let bounds = bd.layout.bounds;\n        bd.outline = [\n            new BABYLON.Vector3(bounds.mins[0], 0, bounds.mins[1]),\n            new BABYLON.Vector3(bounds.maxs[0], 0, bounds.mins[1]),\n            new BABYLON.Vector3(bounds.maxs[0], 0, bounds.maxs[1]),\n            new BABYLON.Vector3(bounds.mins[0], 0, bounds.maxs[1])\n        ];\n    }\n\n    let cRD = globals.renderData.case;\n\n    let cavityInnerEdge = [coremath.genArrayFromOutline(bd.outline, tuning.bezelGap, tuning.bezelCornerFillet, false)];\n    let caseFrame = coremath.genArrayFromOutline(bd.outline, tuning.bezelGap + tuning.bezelThickness, tuning.bezelThickness, false, 8);\n\n    if (cRD.edge) {\n        scene.removeMesh(cRD.edge);\n    }\n    if( tuning.drawCase ) {\n        cRD.edge = BABYLON.MeshBuilder.CreatePolygon(\"edge\", { shape: caseFrame, depth:9, holes: cavityInnerEdge, updatable: true }, scene);\n        cRD.edge.translate(new BABYLON.Vector3(0, -1.5, 0), 1, BABYLON.Space.LOCAL);\n        cRD.edge.material = mats[\"case\"];\n    }\n\n    if (cRD.bottom) {\n        scene.removeMesh(cRD.bottom);\n    }\n    if( tuning.drawCase ) {\n        cRD.bottom = BABYLON.MeshBuilder.CreatePolygon(\"bottom\", { shape: caseFrame, depth:3, updatable: true }, scene);\n        cRD.bottom.translate(new BABYLON.Vector3(0, -9-1.5, 0), 1, BABYLON.Space.LOCAL);\n        cRD.bottom.material = mats[\"case\"];\n    }\n\n    if (cRD.pcbMesh) {\n        scene.removeMesh(cRD.pcbMesh);\n    }\n    if( tuning.drawPCB ) {\n        let kPs = [];\n        for( let [id,rd] of Object.entries(kRD) ) {\n            for( let b of rd.pcbBoxes) {\n                for( let p of b) {\n                    kPs.push(p)\n                }\n            }\n        }\n        bd.pcbOutline = coremath.convexHull2d(kPs);\n    \n        let pcbOutline = coremath.genArrayFromOutline(bd.pcbOutline, 0.0, 2.0, false);\n        cRD.pcbMesh = BABYLON.MeshBuilder.CreatePolygon(\"pcbMesh\", { shape: pcbOutline, depth:1.6, updatable: true }, scene);\n        cRD.pcbMesh.translate(new BABYLON.Vector3(0, -5.0, 0), 1, BABYLON.Space.LOCAL);\n        cRD.pcbMesh.material = mats[\"fr4\"];\n    }\n\n    let keyGroups = {};\n    let bezelOutlines = [];\n    for(const [otherId, oRD] of Object.entries(kRD)) {\n        // console.log(`${otherId} is in kgid: ${oRD.keyGroupId}`);\n        if(!keyGroups[oRD.keyGroupId]) {\n            keyGroups[oRD.keyGroupId] = [];\n        }\n        keyGroups[oRD.keyGroupId].push(oRD);\n    }\n\n    let dbglines = [];\n    for(const [kgId, KG] of Object.entries(keyGroups)) {\n        let outline = getCombinedOutlineFromRDGroup(KG);\n        bezelOutlines.push(coremath.genArrayFromOutline(outline,0.0,tuning.bezelCornerFillet,false));\n        \n        // for( const rd of KG ) {\n        //     for(let iL = 0; iL < rd.outlineLines.length; iL++) {\n        //         dbglines.push(rd.outlineLines[iL])\n        //     }\n        // }\n    }\n    // if( globals.lineSystem ) {\n    //     globals.scene.removeMesh(globals.lineSystem)\n    // }\n    // globals.lineSystem = BABYLON.MeshBuilder.CreateLineSystem(\"lineSystem\", {lines: dbglines}, globals.scene);\n    \n    if (cRD.bezel) {\n        scene.removeMesh(cRD.bezel);\n    }\n    if( tuning.drawBezel ) {\n        cRD.bezel = BABYLON.MeshBuilder.CreatePolygon(\"bezel\", { shape: caseFrame, depth:7.5, holes: bezelOutlines }, scene);\n        cRD.bezel.translate(new BABYLON.Vector3(0, 7.5, 0), 1, BABYLON.Space.LOCAL);\n        //cRD.bezel.rotation = new BABYLON.Vector3(-Math.PI/12, 0, 0);\n        cRD.bezel.material = mats[\"case\"];\n    }\n\n    if (cRD.plate) {\n        scene.removeMesh(cRD.plate);\n    }\n\n    let switchCuts = [];\n    for(const [otherId, rd] of Object.entries(kRD)) {\n        switchCuts.push(...rd.switchCut);\n    }\n    if( tuning.drawPlate ) {\n        cRD.plate = BABYLON.MeshBuilder.CreatePolygon(\"plate\", { shape: caseFrame, depth:1.5, holes: switchCuts }, scene);\n        //cRD.plate.translate()\n        cRD.plate.material = mats[\"plate\"];\n    }\n}\n\nexport function refreshKeyboard() {\n    refreshLayout();\n\n    refreshCase();\n}\n\nexport function loadKeyboard(path) {\n    fetch(path)\n        .then(response => response.json())\n        .then(data => {\n            // console.log(data);\n            let mats = globals.renderData.mats;\n\n            let bd = {};\n            bd.meta = data.meta;\n            bd.forceSymmetrical = true;\n            bd.caseType = \"convex\";\n            bd.case = data.case;\n            bd.layout = {keys: {}};\n            let kIdx = 0\n            for (let k of data.keys) {\n                k.id = \"key\" + kIdx++;\n                \n                if(!mats[k.color]) {\n                    gfx.createKeyMaterial(k.color,BABYLON.Color3.FromHexString(k.color));\n                }\n                k.matName = k.color;\n                \n                bd.layout.keys[k.id] = k;\n            }\n            globals.boardData = bd;\n            \n            gfx.createMaterials();\n            refreshKeyboard();\n            gfx.snapCamera();\n        });\n}\n","import {globals} from './globals.js'\nimport * as boardOps from './boardOps.js'\n\nexport const kbgbGUI = {\n    addButton: function(txt, action, style) {\n        style = style?style:{};\n        var button = BABYLON.GUI.Button.CreateSimpleButton(\"button\", txt);\n        button.top = \"0px\";\n        button.left = \"0px\";\n        button.width = style.width?style.width:\"60px\";\n        button.height = style.height?style.height:\".4\";\n        button.cornerRadius = 5;\n        button.thickness = 2;\n        button.children[0].color = \"#DFF9FB\";\n        button.children[0].fontSize = 24;\n        button.color = \"#FF7979\";\n        button.background = \"#EB4D4B\";\n        //button.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n    \n        button.onPointerClickObservable.add(action);\n    \n        return button;\n    },\n    addLabel: function(txt) {\n        var t = new BABYLON.GUI.TextBlock();\n        t.width = \"80px\";\n        t.height = \".9\";\n        t.text = txt;\n        t.color = \"white\";\n        t.fontSize = 24;\n        return t;\n    },\n    addKeyActionButton: function(txt, keyAction) {\n        return kbgbGUI.addButton(txt, function () {\n            for (let kId of globals.pickedKeys) {\n                let bd = globals.boardData;\n                let k = bd.layout.keys[kId];\n                keyAction(k);\n            }\n            boardOps.refreshKeyboard();\n        }); \n    },\n    modes:{\n        \"key\":{\n            add: function() {\n                //let ctrlBar = BABYLON.GUI.Control.AddHeader(control, text, size, options { isHorizontal, controlFirst }):\n                let ctrlBar = new BABYLON.GUI.StackPanel();  \n                ctrlBar.height = \".2\";\n                ctrlBar.isPointerBlocker = true;\n                ctrlBar.isVertical = false;\n                //ctrlBar.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n                ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"Pos: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`◄`, (k) => k.x -= 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`▲`, (k) => k.y -= 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`▼`, (k) => k.y += 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`►`, (k) => k.x += 0.25 ));\n            \n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"Rot: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⤹`, (k) => k.rotation_angle -= 5 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⤸`, (k) => k.rotation_angle += 5 ));\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"W: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⬌`, (k) => k.width += 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⬄`, (k) => k.width -= 0.25 ));\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"H: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⬍`, (k) => k.height += 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⇳`, (k) => k.height -= 0.25 ));\n                \n                globals.screengui.addControl(ctrlBar);\n                kbgbGUI.activeModeCtrl = ctrlBar;\n            }\n        },\n        \"case\":{\n            add: function() {\n                //let ctrlBar = BABYLON.GUI.Control.AddHeader(control, text, size, options { isHorizontal, controlFirst }):\n                let ctrlBar = new BABYLON.GUI.StackPanel();  \n                ctrlBar.height = \".2\";\n                ctrlBar.isPointerBlocker = true;\n                ctrlBar.isVertical = false;\n                ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"Type: \"));\n\n                var addRadio = function(text, parent) {\n\n                    var button = new BABYLON.GUI.RadioButton();\n                    button.width = \"20px\";\n                    button.height = \"20px\";\n                    button.color = \"white\";\n                    button.background = \"green\";     \n            \n                    button.onIsCheckedChangedObservable.add(function(state) {\n                        if(state) {\n                            globals.boardData.caseType = text;\n                            boardOps.refreshCase()\n                        }\n                    }); \n            \n                    var header = BABYLON.GUI.Control.AddHeader(button, text, \"100px\", { isHorizontal: true, controlFirst: true });\n                    header.height = \"30px\";\n            \n                    parent.addControl(header);    \n                }\n            \n            \n                let radioCtrl = new BABYLON.GUI.StackPanel();  \n                radioCtrl.height = \"1\";\n                radioCtrl.width = \"200px\";\n                radioCtrl.isVertical = true;\n                addRadio(\"rectangle\", radioCtrl);\n                addRadio(\"convex\", radioCtrl);\n                addRadio(\"concave\", radioCtrl);\n                ctrlBar.addControl(radioCtrl);\n\n                var checkbox = new BABYLON.GUI.Checkbox();\n                checkbox.width = \"20px\";\n                checkbox.height = \"20px\";\n                checkbox.isChecked = false;\n                checkbox.color = \"green\";\n                checkbox.onIsCheckedChangedObservable.add(function(value) {\n                    globals.boardData.forceSymmetrical = value;\n                    boardOps.refreshCase();\n                });\n\n                ctrlBar.addControl(kbgbGUI.addLabel(\"SYM: \"));\n                ctrlBar.addControl(checkbox);\n\n                globals.screengui.addControl(ctrlBar);\n                kbgbGUI.activeModeCtrl = ctrlBar;\n            }\n        },\n        \"details\":{\n            add: function() {\n                //let ctrlBar = BABYLON.GUI.Control.AddHeader(control, text, size, options { isHorizontal, controlFirst }):\n                let ctrlBar = new BABYLON.GUI.StackPanel();  \n                ctrlBar.height = \".2\";\n                ctrlBar.isPointerBlocker = true;\n                ctrlBar.isVertical = false;\n                //ctrlBar.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n                ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n            \n                let txt = kbgbGUI.addLabel(\"WORK IN PROGRESS.  Press 'r' to cycle keyboards, press 'k', 'b', 'p' and 'c' to toggle rendering of stuff\");\n\n                txt.width = \"1200px\";\n                ctrlBar.addControl(txt);\n                \n                globals.screengui.addControl(ctrlBar);\n                kbgbGUI.activeModeCtrl = ctrlBar;\n            }\n        },\n    },\n    setGUIMode: function(mode) {\n        if(kbgbGUI.activeModeCtrl) {\n            globals.screengui.removeControl(kbgbGUI.activeModeCtrl);\n        }\n        if(kbgbGUI.modes[mode]) {\n            kbgbGUI.modes[mode].add();\n        }\n    },\n    addModeGUI: function() {\n        let ctrlBar = new BABYLON.GUI.StackPanel();  \n        ctrlBar.height = \".1\";\n        ctrlBar.isPointerBlocker = true;\n        ctrlBar.isVertical = false;\n        //ctrlBar.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n        ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;\n\n        ctrlBar.addControl(kbgbGUI.addButton(\"layout\", () => {kbgbGUI.setGUIMode(\"key\")}, {height:\"1\",width:\"120px\"}));\n        ctrlBar.addControl(kbgbGUI.addButton(\"case\", () => {kbgbGUI.setGUIMode(\"case\")}, {height:\"1\",width:\"120px\"}));\n        ctrlBar.addControl(kbgbGUI.addButton(\"pcb\", () => {kbgbGUI.setGUIMode(\"pcb\")}, {height:\"1\",width:\"120px\"}));\n        ctrlBar.addControl(kbgbGUI.addButton(\"deets\", () => {kbgbGUI.setGUIMode(\"details\")}, {height:\"1\",width:\"120px\"}));\n\n        kbgbGUI.modeCtrl = ctrlBar;\n        globals.screengui.addControl(ctrlBar);\n    }\n}","import {globals} from './globals.js'\nimport {tuning} from './tuning.js'\nimport {kbgbGUI} from './ui.js'\nimport * as boardOps from './boardOps.js'\nimport * as gfx from './gfx.js'\n\nfunction initKBGB() {\n    gfx.init();\n\n    globals.screengui = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"screenUI\");\n\n    kbgbGUI.addModeGUI();\n\n    // run the render loop\n    globals.engine.runRenderLoop(function () {\n        globals.scene.render();\n    });\n\n    let keyboards = [\n        'testkbs/hy_nova.kle',\n        'testkbs/ansi104.kle',\n        'testkbs/fc660m.kle',\n        'testkbs/kle_atreus.kle',\n        'testkbs/basis-mono.kle',\n        'testkbs/basis-stagger-3.kle',\n        'testkbs/kle-ergodox.kle',\n        'testkbs/foggy_sp_knobs.kle',\n        'testkbs/reddit-9d-ortho.kle',\n        'testkbs/onekey.kle',\n        'testkbs/twokey.kle',\n        'testkbs/threekey.kle',\n        'testkbs/threekeyoffset.kle',\n        'testkbs/keysize_test.kle'\n    ]\n    let kbdidx = 13;\n\n    // load a keyboard\n    boardOps.loadKeyboard(keyboards[kbdidx]);\n\n    // the canvas/window resize event handler\n    window.addEventListener('resize', function () {\n        globals.engine.resize();\n    });\n\n    window.addEventListener('keydown', event => {\n        if( event.key == 'i' ) {\n            if(globals.scene.debugLayer.isVisible()) {\n                globals.scene.debugLayer.hide();\n            } else {\n                globals.scene.debugLayer.show();\n            }\n        }\n        if( event.key == 'k' ) {\n            tuning.keyShape = tuning.keyShape?null:\"square\";\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'c' ) {\n            tuning.drawCase = tuning.drawCase?false:true;\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'p' ) {\n            tuning.drawPlate = tuning.drawPlate?false:true;\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'e' ) {\n            tuning.drawPCB = tuning.drawPCB?false:true;\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'b' ) {\n            tuning.drawBezel = tuning.drawBezel?false:true;\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'r' ) {\n            kbdidx = (kbdidx+1)%keyboards.length;\n            boardOps.loadKeyboard(keyboards[kbdidx]);\n        }\n    })\n}\n\nwindow.addEventListener('DOMContentLoaded', function () {\n    initKBGB();\n});\n\n\n\n//When click event is raised\nwindow.addEventListener(\"click\", function (e) {\n    const scene = globals.scene;\n    var pickResult = scene.pick(scene.pointerX, scene.pointerY);\n    //console.log(pickResult);\n    if (pickResult && pickResult.pickedMesh) {\n        if (globals.boardData.layout.keys[pickResult.pickedMesh.name]) {\n            let pickedKeys = globals.pickedKeys;\n            if (e.metaKey || e.ctrlKey) {\n                if (globals.pickedKeys.indexOf(pickResult.pickedMesh.name) > 0) {\n                    globals.pickedKeys.splice(globals.pickedKeys.indexOf(pickResult.pickedMesh.name), 1)\n                }\n                else {\n                    globals.pickedKeys.push(pickResult.pickedMesh.name)\n                }\n            }\n            else {\n                globals.pickedKeys = [pickResult.pickedMesh.name];\n            }\n            console.log(\"picked key \" + pickResult.pickedMesh.name)\n            boardOps.refreshOutlines();\n        }\n    }\n});"],"names":["globals","pickedKeys","renderData","keys","case","mats","outlines","tuning","keyDims","switchCutout","base1U","bezelGap","bezelThickness","bezelCornerFillet","keyShape","drawCase","drawBezel","drawPlate","drawPCB","lineLineIntersection","p0","d0","p1","d1","det","x","z","Math","abs","BABYLON","Epsilon","prevC","nextC","Vector3","segmentToSegment","x0","x1","xL","xNorm","y0","y1","yL","subtract","result","intersection","normalize","type","y0Dot","Dot","y1Dot","x0Dot","x1Dot","dir","xNormalized","normalizeToNew","dot","nearestPoint","add","scale","lengthSquared","pointToLineDistSq","isPointInPoly","p","poly","i","length","point","nextDir","nextNorm","pV","getRotFromNormal","norm","t","acos","PI","orient","a","b","c","s","l","r","tol","convexHull2d","points","n","Array","sorted","sort","d","lower","upper","idx","m","pop","push","ptr","nl","j","pList","unshift","genArrayFromOutline","outline","offset","fillets","close","segments","outPoints","next","prev","prevDir","prevNorm","inPoint","outPoint","fillet","flip","filletCenter","startRot","endRot","rotStep","rot","cos","sin","createKeyMaterial","name","color","PBRMetallicRoughnessMaterial","scene","metallic","roughness","baseColor","environmentTexture","hdrTexture","init","canvas","document","getElementById","engine","Engine","Scene","camera","ArcRotateCamera","setTarget","Zero","attachControl","CubeTexture","CreateFromPrefilteredData","currentSkybox","createDefaultSkybox","activeCamera","maxZ","minZ","createScene","refreshOutlines","kRD","oRD","k","o","Object","entries","removeMesh","id","rd","MeshBuilder","CreateRibbon","pathArray","coremath.genArrayFromOutline","material","translate","Space","LOCAL","console","log","getPlateCutsWithStabs","width","height","kXform","plateCuts","pcbBounds","switchCutDims","sXform","Matrix","Translation","multiply","TransformCoordinates","keyPCBBounds","span","RotationY","stabCutDims","stabOffsetXL","stabOffsetXR","stabXforms","stabCut","stabPCBFootDims","stabFoot","xformedCut","xformedPCBBounds","getCombinedOutlineFromRDGroup","KG","outlineLines","parsedOutlineLines","bezelHole","lStart","lEnd","maxOverlapSq","overlapFunc","primeL","primeLen","otherLen","line","distBetween","lineArray","parseArray","primeToOtherNear","max","primeToOtherFar","splice","visitedForOutline","oId","otherRD","overlappingKeys","iL","lL","lDir","lLen","lineNorm","normalizeFromLength","jL","oL","oDir","oLen","oLNorm","lineDot","diff","d2ls","dd","overlapDist","lNorm","intersections","colinear","iOP","segRes","coremath.segmentToSegment","isStartInPoly","coremath.isPointInPoly","isEndInPoly","tmp","nextKeyRd","nextLineIndex","invertNextLine","prevLine","nextDistSq","checkNext","nRd","newDistSq","refreshCase","bd","boardData","caseType","kPs","coremath.convexHull2d","forceSymmetrical","midPoint","layout","bounds","maxs","mins","oP","y","cRD","cavityInnerEdge","caseFrame","edge","CreatePolygon","shape","depth","holes","updatable","bottom","pcbMesh","pcbBoxes","pcbOutline","keyGroups","bezelOutlines","otherId","keyGroupId","kgId","bezel","plate","switchCuts","switchCut","refreshKeyboard","bezelHoles","keycap","kgID","bezelMins","bezelMaxs","keycapDim","kPos","Identity","rotation_angle","rotation_x","rotation_y","matName","min","checkOverlap","k1","rd1","k2","rd2","checkIntersection","pRD","iP","allLess","allMore","confirmedIntersection","pKG","oKG","refreshLayout","loadKeyboard","path","fetch","then","response","json","data","meta","kIdx","gfx.createKeyMaterial","Color3","FromHexString","StandardMaterial","diffuseColor","emissiveColor","specularColor","caseMatName","plateMatName","pcbMatName","gfx.createMaterials","alpha","beta","radius","gfx.snapCamera","kbgbGUI","addButton","txt","action","style","button","GUI","Button","CreateSimpleButton","top","left","cornerRadius","thickness","children","fontSize","background","onPointerClickObservable","addLabel","TextBlock","text","addKeyActionButton","keyAction","kId","boardOps.refreshKeyboard","modes","key","ctrlBar","StackPanel","isPointerBlocker","isVertical","verticalAlignment","Control","VERTICAL_ALIGNMENT_BOTTOM","addControl","screengui","activeModeCtrl","addRadio","parent","RadioButton","onIsCheckedChangedObservable","state","boardOps.refreshCase","header","AddHeader","isHorizontal","controlFirst","radioCtrl","checkbox","Checkbox","isChecked","value","details","setGUIMode","mode","removeControl","addModeGUI","VERTICAL_ALIGNMENT_TOP","modeCtrl","window","addEventListener","gfx.init","AdvancedDynamicTexture","CreateFullscreenUI","runRenderLoop","render","keyboards","kbdidx","boardOps.loadKeyboard","resize","event","debugLayer","isVisible","hide","show","initKBGB","e","pickResult","pick","pointerX","pointerY","pickedMesh","metaKey","ctrlKey","indexOf","boardOps.refreshOutlines"],"mappings":"2FAAO,MAAMA,EAAU,CACnBC,WAAY,GACZC,WAAY,CAAEC,KAAM,GAAIC,KAAM,GAAIC,KAAM,GAAIC,SAAU,KCF7CC,EAAS,CAClBC,QAAS,CAAC,GAAM,IAChBC,aAAc,CAAC,GAAM,IACrBC,OAAQ,CAAC,MAAO,OAChBC,SAAU,KACVC,eAAgB,EAChBC,kBAAmB,GACnBC,SAAS,SACTC,UAAS,EACTC,WAAU,EACVC,WAAU,EACVC,SAAQ,GCVL,SAASC,EAAqBC,EAAIC,EAAIC,EAAIC,GAC7C,IAAIC,EAAMH,EAAGI,EAAIF,EAAGG,EAAIH,EAAGE,EAAIJ,EAAGK,EAClC,GAAIC,KAAKC,IAAIJ,GAAOK,QAAQC,QAExB,OAAO,KAGX,IAAIC,EAAQX,EAAGK,EAAIJ,EAAGI,EAAIL,EAAGM,EAAIL,EAAGK,EAChCM,EAAQV,EAAGG,EAAIF,EAAGE,EAAIH,EAAGI,EAAIH,EAAGG,EAIpC,OAHmB,IAAIG,QAAQI,SAASV,EAAGG,EAAIK,EAAQV,EAAGK,EAAIM,GAASR,EAAK,GACvEH,EAAGI,EAAIO,EAAQT,EAAGE,EAAIM,GAASP,GAcjC,SAASU,EAAiBC,EAAIC,EAAIC,EAAIC,EAAOC,EAAIC,GAEpD,IAAIC,EAAKD,EAAGE,SAASH,GAIjBI,EAAS,CAACC,aAAczB,EAAqBgB,EAAGG,EAAMC,EAF9C,IAAKV,QAAQI,QAAQQ,EAAGf,EAAG,GAAIe,EAAGhB,GAAIoB,aAGpCC,KAAK,WACnB,GAAGH,EAAOC,aAAc,CACpB,IAAIG,EAAQlB,QAAQI,QAAQe,IAAIL,EAAOC,aAAaF,SAASH,GAAIE,GAC7DQ,EAAQpB,QAAQI,QAAQe,IAAIL,EAAOC,aAAaF,SAASF,GAAIC,GAC7DS,EAAQrB,QAAQI,QAAQe,IAAIL,EAAOC,aAAaF,SAASP,GAAIE,GAC7Dc,EAAQtB,QAAQI,QAAQe,IAAIL,EAAOC,aAAaF,SAASN,GAAIC,GAC9DU,GAASlB,QAAQC,SAAWmB,EAAQpB,QAAQC,SAC5CoB,GAASrB,QAAQC,SAAWqB,EAAQtB,QAAQC,QAC3Ca,EAAOG,KAAO,aAEdH,EAAOG,KAAO,mBA1B1B,SAA2BX,EAAIE,EAAIE,GAC/B,IAAIa,EAAMb,EAAGG,SAASP,GAClBkB,EAAchB,EAAGiB,iBACjBC,EAAM1B,QAAQI,QAAQe,IAAII,EAAIC,GAE9BG,EAAerB,EAAGsB,IAAIJ,EAAYK,MAAMH,IAC5C,OAAOhB,EAAGG,SAASc,GAAcG,iBAuB1BC,CAAkBzB,EAAGE,EAAGE,GAAMV,QAAQC,QACrCa,EAAOG,KAAO,WAUdH,EAAOG,KAAO,WAGtB,OAAOH,EAIJ,SAASkB,EAAcC,EAAGC,GAC7B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACjC,IAAIE,EAAQH,EAAKC,GAEbG,EADOJ,GAAMC,EAAI,GAAKD,EAAKE,QACZvB,SAASwB,GAAOrB,YAC/BuB,EAAW,IAAIvC,QAAQI,QAAQkC,EAAQzC,EAAG,GAAIyC,EAAQ1C,GACtD4C,EAAKP,EAAEpB,SAASwB,GAAOrB,YAE3B,GADQhB,QAAQI,QAAQe,IAAIqB,EAAGD,GACvBvC,QAAQC,QACZ,OAAO,EAGf,OAAO,EAGJ,SAASwC,EAAiBC,GAC7B,IAAIC,EAAI7C,KAAK8C,KAAKF,EAAK9C,GAEvB,OADI8C,EAAK7C,EAAI,IAAG8C,EAAI,EAAI7C,KAAK+C,GAAKF,GAC3BA,EASX,SAASG,EAAOC,EAAGC,EAAGC,GAClB,IAGIC,EAHAC,GAAKJ,EAAElD,EAAIoD,EAAEpD,IAAMmD,EAAEpD,EAAIqD,EAAErD,GAC3BwD,GAAKL,EAAEnD,EAAIqD,EAAErD,IAAMoD,EAAEnD,EAAIoD,EAAEpD,GAC3BF,EAAMwD,EAAIC,EAEd,GAAGD,EAAI,EAAG,CACR,GAAGC,GAAK,EACN,OAAOzD,EAEPuD,EAAIC,EAAIC,MAEL,CAAA,KAAGD,EAAI,GAOZ,OAAOxD,EANP,GAAGyD,GAAK,EACN,OAAOzD,EAEPuD,IAAMC,EAAIC,GAKd,IAAIC,EArBU,sBAqBQH,EACtB,OAAGvD,GAAO0D,GAAO1D,IAAQ0D,EAChB1D,EAEF,EAIJ,SAAS2D,EAAaC,GACzB,IAAIC,EAAID,EAAOnB,OAEf,GAAIoB,EAAI,EAAG,CAEP,IADA,IAAI1C,EAAS,IAAI2C,MAAMD,GACdrB,EAAI,EAAGA,EAAIqB,IAAKrB,EACrBrB,EAAOqB,GAAKA,EAGhB,OAAU,IAANqB,GACAD,EAAO,GAAG3D,IAAM2D,EAAO,GAAG3D,GAC1B2D,EAAO,GAAG1D,IAAM0D,EAAO,GAAG1D,EACnB,CAAC,GAGLiB,EAIX,IAAI4C,EAAS,IAAID,MAAMD,GACvB,IAASrB,EAAI,EAAGA,EAAIqB,IAAKrB,EACrBuB,EAAOvB,GAAKA,EAEhBuB,EAAOC,MAAK,SAAUZ,EAAGC,GACrB,IAAIY,EAAIL,EAAOR,GAAGnD,EAAI2D,EAAOP,GAAGpD,EAChC,OAAIgE,GAGGL,EAAOR,GAAGlD,EAAI0D,EAAOP,GAAGnD,KAInC,IAAIgE,EAAQ,CAACH,EAAO,GAAIA,EAAO,IAC3BI,EAAQ,CAACJ,EAAO,GAAIA,EAAO,IAE/B,IAASvB,EAAI,EAAGA,EAAIqB,IAAKrB,EAAG,CAMxB,IALA,IAAI4B,EAAML,EAAOvB,GACbF,EAAIsB,EAAOQ,GAGXC,EAAIH,EAAMzB,OACP4B,EAAI,GAAKlB,EACQS,EAAOM,EAAMG,EAAI,IACjBT,EAAOM,EAAMG,EAAI,IACjB/B,IAAM,GAC1B+B,GAAK,EACLH,EAAMI,MAMV,IAJAJ,EAAMK,KAAKH,GAGXC,EAAIF,EAAM1B,OACH4B,EAAI,GAAKlB,EACZS,EAAOO,EAAME,EAAI,IACjBT,EAAOO,EAAME,EAAI,IACjB/B,IAAM,GACN+B,GAAK,EACLF,EAAMG,MAEVH,EAAMI,KAAKH,GAIXjD,EAAS,IAAI2C,MAAMK,EAAM1B,OAASyB,EAAMzB,OAAS,GAErD,IAFA,IACI+B,EAAM,EACMC,GAAPjC,EAAI,EAAQ0B,EAAMzB,QAAQD,EAAIiC,IAAMjC,EACzCrB,EAAOqD,KAASN,EAAM1B,GAE1B,IAAK,IAAIkC,EAAIP,EAAM1B,OAAS,EAAGiC,EAAI,IAAKA,EACpCvD,EAAOqD,KAASL,EAAMO,GAG1B,IAAIC,EAAQ,GACZ,IAAK,MAAMnC,KAAKrB,EACZwD,EAAMC,QAAQhB,EAAOpB,IAIzB,OAAOmC,EAIJ,SAASE,EAAoBC,EAASC,EAAQC,EAASC,EAAOC,GACjE,IAAIC,EAAY,GAEXD,IACDA,EAAW,GAGf,IAAK,IAAI1C,EAAI,EAAGA,EAAIsC,EAAQrC,OAAQD,IAAK,CACrC,IAAIE,EAAQoC,EAAQtC,GAChB4C,EAAON,GAAStC,EAAI,GAAKsC,EAAQrC,QACjC4C,EAAOP,GAAStC,EAAI,EAAIsC,EAAQrC,QAAUqC,EAAQrC,QAClDE,EAAUyC,EAAKlE,SAASwB,GAAOrB,YAC/BiE,EAAU5C,EAAMxB,SAASmE,GAAMhE,YAC/BuB,EAAW,IAAIvC,QAAQI,QAAQkC,EAAQzC,EAAG,GAAIyC,EAAQ1C,GACtDsF,EAAW,IAAIlF,QAAQI,QAAQ6E,EAAQpF,EAAG,GAAIoF,EAAQrF,GACtDuF,EAAU9C,EAAMT,IAAIsD,EAASrD,MAAM6C,IACnCU,EAAW/C,EAAMT,IAAIW,EAASV,MAAM6C,IAEpC3D,EAAezB,EAAqB6F,EAASD,EAC7CE,EAAU7C,GACd,GAAqB,OAAjBxB,EAMJ,GAAK4D,EAGA,CACD,IAAIU,EAASV,EACTW,EAAOtF,QAAQI,QAAQe,IAAI+D,EAAS5C,GAAW,EAC/CgD,IACAD,GAAUA,GAEd,IAAIE,EAAejG,EAAqB6F,EAAQvD,IAAIsD,EAASrD,OAAOwD,IAAUH,EAC1EE,EAASxD,IAAIW,EAASV,OAAOwD,IAAU9C,GAGvCiD,EAAW/C,EAAiByC,GAAqB,EAAVpF,KAAK+C,GAC5C4C,EAAShD,EAAiBF,GAAqB,EAAVzC,KAAK+C,GAC3CyC,GACCE,GAAY1F,KAAK+C,GACjB4C,GAAU3F,KAAK+C,GACfwC,GAAUA,EACNG,EAAWC,IACXD,GAAsB,EAAV1F,KAAK+C,KAGhB4C,EAASD,IACdC,GAAoB,EAAV3F,KAAK+C,IAEnB,IAAI6C,GAAWD,EAASD,GAAYX,EACpC,IAAK,IAAI1C,EAAI,EAAGA,GAAK0C,EAAU1C,IAC3B2C,EAAUZ,KAAKqB,EAAa3D,KA1KX+D,EA0KgCH,EAAWE,EAAUvD,EAzK3E,IAAInC,QAAQI,QAAQN,KAAK8F,IAAID,GAAM,EAAG7F,KAAK+F,IAAIF,KAyK+B9D,MAAMwD,UA3BnFP,EAAUZ,KAAKnD,QANf+D,EAAUZ,KAAKiB,GACfL,EAAUZ,KAAKkB,GA1IpB,IAA0BO,EAmL7B,OAJIf,GACAE,EAAUZ,KAAKY,EAAU,IAGtBA,ECpQJ,SAASgB,EAAkBC,EAAKC,GACnC,IAAIxH,EAAOL,EAAQE,WAAWG,KAC9BA,EAAKuH,GAAQ,IAAI/F,QAAQiG,6BAA6BF,EAAM5H,EAAQ+H,OACpE1H,EAAKuH,GAAMI,SAAW,EACtB3H,EAAKuH,GAAMK,UAAY,GACvB5H,EAAKuH,GAAMM,UAAYL,EACvBxH,EAAKuH,GAAMO,mBAAqBnI,EAAQoI,WAyErC,SAASC,IAEZrI,EAAQsI,OAASC,SAASC,eAAe,gBAGzCxI,EAAQyI,OAAS,IAAI5G,QAAQ6G,OAAO1I,EAAQsI,QAAQ,GAGpDtI,EAAQ+H,MApCZ,WACI,MAAMU,EAASzI,EAAQyI,OAGvB,IAAIV,EAAQ,IAAIlG,QAAQ8G,MAAMF,GAE1BG,EAAS,IAAI/G,QAAQgH,gBAAgB,UAAWlH,KAAK+C,GAAK,EAAG,EAAG,GAAI,IAAI7C,QAAQI,QAAQ,EAAG,EAAG,GAAI8F,GAmBtG,OAhBAa,EAAOE,UAAUjH,QAAQI,QAAQ8G,QAGjCH,EAAOI,cAAchJ,EAAQsI,QAAQ,GAErCtI,EAAQ4I,OAASA,EAOjB5I,EAAQoI,WAAavG,QAAQoH,YAAYC,0BADxB,yBAC8DnB,GAC/E/H,EAAQmJ,cAAgBpB,EAAMqB,oBAAoBpJ,EAAQoI,YAAY,GAAOL,EAAMsB,aAAaC,KAAOvB,EAAMsB,aAAaE,MAAQ,EAAG,IAG9HxB,EAWSyB,GCrFb,SAASC,IACZ,IAAIC,EAAM1J,EAAQE,WAAWC,KACzBwJ,EAAM3J,EAAQE,WAAWI,SACzBD,EAAOL,EAAQE,WAAWG,KAE9B,IAAK,MAAOuJ,EAAGC,KAAMC,OAAOC,QAAQJ,GAChC3J,EAAQ+H,MAAMiC,WAAWH,GAG7B,IAAK,MAAMI,KAAMjK,EAAQC,WACrB,GAAKyJ,EAAIO,GAGJ,CACD,IAAIC,EAAKR,EAAIO,GAEbN,EAAIM,GAAMpI,QAAQsI,YAAYC,aAAaH,EAAK,UAC5C,CACII,UAAW,CAACC,EAA6BJ,EAAG5D,QAAS,GAAK,IAAK,GAC3DgE,EAA6BJ,EAAG5D,QAAS,GAAK,IAAK,KACxDtG,EAAQ+H,OACf4B,EAAIM,GAAIM,SAAWlK,EAAa,OAChCsJ,EAAIM,GAAIO,UAAU,IAAI3I,QAAQI,QAAQ,EAAG,KAAM,GAAI,EAAGJ,QAAQ4I,MAAMC,YAXpEC,QAAQC,IAAI,0BAgBxB,SAASC,EAAsBC,EAAMC,EAAOC,EAAOC,EAAUC,GACzD,IAAIC,EAAgB,CAAwB,GAAvB5K,EAAOE,aAAa,GAA+B,GAAvBF,EAAOE,aAAa,IACjE2K,EAASJ,EAGD,GAATF,IACCM,EAASvJ,QAAQwJ,OAAOC,YAAY,MAAO,EAAG,GAAGC,SAASH,IAE9DH,EAAUlF,KAAK,CACXlE,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASkJ,EAAc,GAAI,GAAIA,EAAc,IAAKC,GACnGvJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQkJ,EAAc,GAAI,GAAIA,EAAc,IAAKC,GAClGvJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQkJ,EAAc,GAAI,EAAGA,EAAc,IAAKC,GACjGvJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASkJ,EAAc,GAAI,EAAGA,EAAc,IAAKC,KAKtG,IAAIK,EAAe,CAAC,EAAE,MACtBP,EAAUnF,KAAK,CACXlE,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASwJ,EAAa,GAAI,GAAIA,EAAa,IAAKL,GACjGvJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQwJ,EAAa,GAAI,GAAIA,EAAa,IAAKL,GAChGvJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQwJ,EAAa,GAAI,EAAGA,EAAa,IAAKL,GAC/FvJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASwJ,EAAa,GAAI,EAAGA,EAAa,IAAKL,KAGpG,IAAIM,EAAOZ,EACRC,GAAU,OACTW,EAAOX,EACPK,EAASvJ,QAAQwJ,OAAOM,UAAUhK,KAAK+C,GAAK,GAAK6G,SAASH,IAG9D,IAAIQ,EAAc,CAAC,IAAM,KACzB,GAAIF,GAAQ,EAAI,CACZ,IAAIG,EAAe,EACfC,EAAe,EAChBJ,GAAQ,KACPG,EAAeC,EAAe,OAE1BJ,GAAQ,EACZG,EAAeC,EAAe,MAE1BJ,GAAQ,EACZG,EAAeC,EAAe,OAE1BJ,GAAQ,IACZG,EAAeC,EAAe,OAE1BJ,GAAQ,IACZG,EAAeC,EAAe,QAElB,GAARJ,GAEJG,EAAe,MACfC,EAAe,MAGfD,EAAeC,EADXJ,GAAQ,EACkB,KAE1BA,GAAQ,KACkB,GAE1BA,GAAQ,IACkB,MAE1BA,GAAQ,EACkB,MAGA,OAGlC,IAAIK,EAAa,CAAClK,QAAQwJ,OAAOC,aAAaO,EAAc,GAAI,GAAGN,SAASH,GAC1DvJ,QAAQwJ,OAAOC,YAAaQ,EAAc,GAAI,GAAGP,SAASH,IACxEY,EAAU,CAAC,IAAInK,QAAQI,SAAS2J,EAAY,GAAI,GAAIA,EAAY,IACrD,IAAI/J,QAAQI,QAAQ2J,EAAY,GAAI,GAAIA,EAAY,IACpD,IAAI/J,QAAQI,QAAQ2J,EAAY,GAAI,EAAGA,EAAY,IACnD,IAAI/J,QAAQI,SAAS2J,EAAY,GAAI,EAAGA,EAAY,KAG/DK,EAAkB,CAAC,EAAE,KACrBC,EAAW,CAAC,IAAIrK,QAAQI,SAASgK,EAAgB,GAAI,GAAI,GAC7D,IAAIpK,QAAQI,QAAQgK,EAAgB,GAAI,GAAI,GAC5C,IAAIpK,QAAQI,QAAQgK,EAAgB,GAAI,EAAG,IAC3C,IAAIpK,QAAQI,SAASgK,EAAgB,GAAI,EAAG,KAE5C,IAAI,IAAI/F,EAAI,EAAGA,EAAI6F,EAAW9H,OAAQiC,IAAK,CACvC,IAAIiG,EAAa,GACjB,IAAI,IAAInI,EAAI,EAAGA,EAAIgI,EAAQ/H,OAAQD,IAC/BmI,EAAWpG,KAAKlE,QAAQI,QAAQuJ,qBAAqBQ,EAAQhI,GAAG+H,EAAW7F,KAE/E+E,EAAUlF,KAAKoG,GAEf,IAAIC,EAAmB,GACvB,IAAI,IAAIpI,EAAI,EAAGA,EAAIkI,EAASjI,OAAQD,IAChCoI,EAAiBrG,KAAKlE,QAAQI,QAAQuJ,qBAAqBU,EAASlI,GAAG+H,EAAW7F,KAEtFgF,EAAUnF,KAAKqG,KAmL3B,SAASC,EAA8BC,GACnC,IAAK,MAAMpC,KAAMoC,EAAK,CAClBpC,EAAGqC,aAAe,GAClBrC,EAAGsC,mBAAqB,GACxB,IAAI,IAAI1I,EAAI,EAAGA,EAAIoG,EAAGuC,UAAUxI,OAAQH,IAAK,CACzC,IAAI4I,EAASxC,EAAGuC,UAAU3I,GACtB6I,EAAOzC,EAAGuC,WAAW3I,EAAE,GAAGoG,EAAGuC,UAAUxI,QAC3CiG,EAAGqC,aAAaxG,KAAK,CAAC2G,EAAOC,KAKrC,IAAIC,EAAe/K,QAAQC,QAEvB+K,EAAc,CAACC,EAAQC,EAAUC,EAAUC,EAAM1I,EAAM2I,EAAaC,EAAWC,KAC/E,IAAIA,EAAWN,GAAS,CACpB,IAAIO,EAAmB1L,KAAK2L,IAAIJ,EAAcF,EAAS,GAAKD,EACxDQ,EAAkBL,EAAcH,EACjCM,EAAmB,EAAIxL,QAAQC,SAAWyL,EAAkB1L,QAAQC,UAG/DuL,EAAmBxL,QAAQC,SAC3BqL,EAAUpH,KAAK,CAACkH,EAAK,GAAGA,EAAK,GAAGxJ,IAAIc,EAAKb,MAAMwJ,EAAcF,MAE7DO,EAAkB,EAAI1L,QAAQC,SAC9BqL,EAAUpH,KAAK,CAACkH,EAAK,GAAGxJ,IAAIc,EAAKb,MAAMwJ,IAAeD,EAAK,KAE/DE,EAAUK,OAAOV,EAAO,MAKpC,IAAK,MAAM5C,KAAMoC,EAAK,CAElBpC,EAAGuD,mBAAoB,EAEvB,IAAK,MAAOC,EAAIC,KAAY7D,OAAOC,QAAQG,EAAG0D,iBAE1C,IAAI,IAAIC,EAAK3D,EAAGqC,aAAatI,OAAO,EAAG4J,GAAM,EAAGA,IAAM,CAClD,IAAIC,EAAK5D,EAAGqC,aAAasB,GACrBE,EAAOD,EAAG,GAAGpL,SAASoL,EAAG,IACzBE,EAAOD,EAAK9J,SAChB,GAAG+J,EAAOnM,QAAQC,QAAS,SAC3B,IAAImM,EAAWF,EAAKG,oBAAoBF,GAExC,IAAK,IAAIG,EAAKR,EAAQpB,aAAatI,OAAO,EAAGkK,EAAK,EAAGA,IAAO,CACxD,IAAIC,EAAKT,EAAQpB,aAAa4B,GAC1BE,EAAOD,EAAG,GAAG1L,SAAS0L,EAAG,IACzBE,EAAOD,EAAKpK,SAChB,GAAGqK,EAAOzM,QAAQC,QAAU,SAC5B,IAAIyM,EAASF,EAAKH,oBAAoBI,GAClCE,EAAU3M,QAAQI,QAAQe,IAAIuL,EAAON,GACzC,GAAItM,KAAKC,IAAI4M,GAAW,EAAE3M,QAAQC,QAAS,CACvC,IAAI2M,EAAOX,EAAG,GAAGpL,SAAS0L,EAAG,IAC7B,GAAGK,EAAK9K,gBAAkB9B,QAAQC,QAAS,CACvC,IACI4M,EADKZ,EAAG,GAAGpL,SAAS0L,EAAG,IACbzK,gBACd,GAAG+K,EAAM7M,QAAQC,SAAW4M,EAAOV,EAAKA,EAAM,CAC1C9D,EAAGqC,aAAaiB,OAAOK,EAAG,GAC1B,MAEAC,EAAG,GAAKM,EAAG,GACX,MAGR,IAAIO,EAAK9M,QAAQI,QAAQe,IAAIyL,EAAMF,GAEnC,GADgBH,EAAG,GAAG3K,IAAI8K,EAAO7K,MAAMiL,IACzBjM,SAASoL,EAAG,IAAInK,gBAAkBiJ,EAE5C,GAAG4B,EAAU3M,QAAQC,QAAQ,EAMzB+K,EAAYsB,EAAGG,EAAKN,EAAKI,EAAGG,EAAOI,EAAGhB,EAAQpB,aAAaoB,EAAQnB,oBACnEK,EAAYgB,EAAGG,EAAKM,EAAKR,EAAGG,EAASU,EAAGzE,EAAGqC,aAAarC,EAAGsC,yBAE1D,GAAIgC,EAAU,EAAE3M,QAAQC,QAAU,CACnC,GAAI6M,EAAK9M,QAAQC,QAAU,CAKvB,IAAI8M,EAAcN,EAAOK,EACzB,IAAIzE,EAAGsC,mBAAmBqB,IACnBe,EAAc/M,QAAQC,QAAS,CAE9B,GAAGkM,EAAOY,EAAc/M,QAAQC,QAChC,CAEIoI,EAAGqC,aAAaiB,OAAOK,EAAG,GAC1B,MAIJC,EAAG,GAAKA,EAAG,GAAGrK,IAAIwK,EAASvK,MAAMkL,KAI7C,GAAID,EAAK9M,QAAQC,QAAU,CAKvB,IAAI2D,GAAKkJ,EACT,IAAIzE,EAAGsC,mBAAmBqB,IACnBpI,EAAIuI,EAAOnM,QAAQC,QAAS,CAE3B,GAAG2D,EAAI5D,QAAQC,QACf,CAEIoI,EAAGqC,aAAaiB,OAAOK,EAAG,GAC1B,MAIJC,EAAG,GAAKA,EAAG,GAAGrK,IAAIwK,EAASvK,MAAM+B,UAazE,IAAK,MAAMyE,KAAMoC,EAEb,IAAK,MAAOoB,EAAIC,KAAY7D,OAAOC,QAAQG,EAAG0D,iBAC1C,IAAI,IAAIC,EAAK3D,EAAGqC,aAAatI,OAAS,EAAG4J,GAAM,EAAGA,IAAM,CACpD,IAAI7I,EAAIkF,EAAGqC,aAAasB,GACpBC,EAAK9I,EAAE,GAAGtC,SAASsC,EAAE,IACrB6J,EAAQ,IAAIhN,QAAQI,QAAQ6L,EAAGpM,EAAE,GAAGoM,EAAGrM,GAAGoB,YAE1CiM,EAAgB,GAChBC,GAAW,EACf,IAAI,IAAIC,EAAM,EAAGA,EAAMrB,EAAQlB,UAAUxI,OAAQ+K,IAAO,CACpD,IAAIC,EAASC,EAA0BlK,EAAE,GAAIA,EAAE,GAAI8I,EAAIe,EAAOlB,EAAQlB,UAAUuC,GAAMrB,EAAQlB,WAAWuC,EAAI,GAAGrB,EAAQlB,UAAUxI,SAClI,GAAkB,cAAfgL,EAAOnM,MAAwBmM,EAAOrM,aAGrCkM,EAAc/I,KAAKkJ,EAAOrM,mBAEzB,GAAkB,YAAfqM,EAAOnM,KAAoB,CAG/BiM,GAAW,EACX,OAGR,GAAGA,EAAU,SAEb,IAAII,EAAgBC,EAAuBpK,EAAE,GAAG2I,EAAQlB,WACpD4C,EAAcD,EAAuBpK,EAAE,GAAG2I,EAAQlB,WAGtD,GAAG0C,GAAiBE,GAAeP,EAAc7K,QAAU,EAGvDiG,EAAGqC,aAAaiB,OAAOK,EAAI,QAE1B,GAA2B,GAAxBiB,EAAc7K,OAGfkL,EACCnK,EAAE,GAAK8J,EAAc,GAErB9J,EAAE,GAAK8J,EAAc,GAEtB9J,EAAE,GAAGtC,SAASsC,EAAE,IAAIrB,gBAAkB9B,QAAQC,SAC7CoI,EAAGqC,aAAaiB,OAAOK,EAAI,QAG9B,GAAGiB,EAAc7K,OAAS,EAAG,CAG9B6K,EAActJ,MAAK,CAACZ,EAAEC,IAAOD,EAAElC,SAASsC,EAAE,IAAIrB,gBAAkBkB,EAAEnC,SAASsC,EAAE,IAAIrB,kBACjF,IAAI2L,EAAMtK,EAAE,GACZA,EAAE,GAAK8J,EAAc,GAClB9J,EAAE,GAAGtC,SAASsC,EAAE,IAAIrB,gBAAkB9B,QAAQC,SAE7CoI,EAAGqC,aAAaiB,OAAOK,EAAI,GAG/B,IAAI,IAAI7J,EAAI,EAAGA,EAAI8K,EAAc7K,OAAQD,GAAG,EACpC8K,EAAc9K,EAAE,GAAGtB,SAASoM,EAAc9K,IAAIL,gBAAkB9B,QAAQC,SACxEoI,EAAGqC,aAAaxG,KAAK,CAAC+I,EAAc9K,EAAE,GAAG8K,EAAc9K,KAI5D8K,EAAc7K,OAAS,GAAK,GACvB6K,EAAcA,EAAc7K,OAAO,GAAGvB,SAAS4M,GAAK3L,gBAAkB9B,QAAQC,SAC9EoI,EAAGqC,aAAaxG,KAAK,CAAC+I,EAAcA,EAAc7K,OAAO,GAAGqL,KAWpF,IAAIC,EAAY,KACZC,GAAiB,EACjBC,GAAiB,EAGrB,IAAK,MAAMvF,KAAMoC,EAAK,CAClB,IAAI,IAAIuB,EAAK,EAAGA,EAAK3D,EAAGqC,aAAatI,OAAQ4J,IACzC,IAAI3D,EAAGsC,mBAAmBqB,GAAK,CAC3B0B,EAAYrF,EACZsF,EAAgB3B,EAChB,MAGR,GAAG2B,GAAiB,EAAG,MAG3B,IAAIlJ,EAAU,GAEd,KAAmB,MAAbiJ,GAAqBC,GAAiB,GAAG,CAC3CD,EAAU/C,mBAAmBgD,IAAiB,EAC9C,IAAIE,EAAWH,EAAUhD,aAAaiD,GACtC,GAAGC,EAAgB,CACf,IAAIH,EAAMI,EAAS,GACnBA,EAAS,GAAKA,EAAS,GACvBA,EAAS,GAAKJ,EAIlBhJ,EAAQP,KAAK2J,EAAS,IAGtBF,GAAiB,EACjB,IAAIG,EAAa,GAEbC,EAAY,CAACvK,EAAEwK,EAAI7L,KACnB,IAAI8L,EAAYJ,EAAS,GAAGhN,SAAS2C,EAAE,IAAI1B,gBACxCmM,EAAYH,IACXA,EAAaG,EACbP,EAAYM,EACZL,EAAgBxL,EAChByL,GAAiB,GAGrBK,EAAYJ,EAAS,GAAGhN,SAAS2C,EAAE,IAAI1B,gBACpCmM,EAAYH,IACXA,EAAaG,EACbP,EAAYM,EACZL,EAAgBxL,EAChByL,GAAiB,IAIzB,IAAI,IAAI5B,EAAK,EAAGA,EAAK0B,EAAUhD,aAAatI,OAAQ4J,IAC5C0B,EAAU/C,mBAAmBqB,IAC7B+B,EAAUL,EAAUhD,aAAasB,GAAI0B,EAAU1B,GAIvD,IAAK,MAAOH,EAAIC,KAAY7D,OAAOC,QAAQwF,EAAU3B,iBACjD,IAAK,IAAIO,EAAK,EAAGA,EAAKR,EAAQpB,aAAatI,OAAQkK,IAC5CR,EAAQnB,mBAAmB2B,IAE9ByB,EAAUjC,EAAQpB,aAAa4B,GAAIR,EAAQQ,GAIvD,OAAO7H,EAIJ,SAASyJ,IACZ,MAAMhI,EAAQ/H,EAAQ+H,MAChBiI,EAAKhQ,EAAQiQ,UACbvG,EAAM1J,EAAQE,WAAWC,KACzBE,EAAOL,EAAQE,WAAWG,KAEhC,GAAkB,UAAf2P,EAAGE,SAAsB,CACxB,IAAIC,EAAM,GACV,IAAK,IAAKlG,EAAGC,KAAOJ,OAAOC,QAAQL,GAC/B,IAAK,IAAI5F,KAAKoG,EAAG5D,QACb6J,EAAIpK,KAAKjC,GAKjB,GAFAkM,EAAG1J,QAAU8J,EAAsBD,GAEhCH,EAAGK,iBAAkB,CACpB,IAAIC,EAAmE,IAAvDN,EAAGO,OAAOC,OAAOC,KAAK,GAAKT,EAAGO,OAAOC,OAAOE,KAAK,IAAYV,EAAGO,OAAOC,OAAOE,KAAK,GACnG,IAAI,IAAIC,KAAMX,EAAG1J,QACb6J,EAAIpK,KAAK,IAAIlE,QAAQI,QAAQqO,GAAYK,EAAGlP,EAAI6O,GAAWK,EAAGC,EAAGD,EAAGjP,IAExEsO,EAAG1J,QAAU8J,EAAsBD,QAI3C,CACI,IAAIK,EAASR,EAAGO,OAAOC,OACvBR,EAAG1J,QAAU,CACT,IAAIzE,QAAQI,QAAQuO,EAAOE,KAAK,GAAI,EAAGF,EAAOE,KAAK,IACnD,IAAI7O,QAAQI,QAAQuO,EAAOC,KAAK,GAAI,EAAGD,EAAOE,KAAK,IACnD,IAAI7O,QAAQI,QAAQuO,EAAOC,KAAK,GAAI,EAAGD,EAAOC,KAAK,IACnD,IAAI5O,QAAQI,QAAQuO,EAAOE,KAAK,GAAI,EAAGF,EAAOC,KAAK,KAI3D,IAAII,EAAM7Q,EAAQE,WAAWE,KAEzB0Q,EAAkB,CAACxG,EAA6B0F,EAAG1J,QAAS/F,EAAOI,SAAUJ,EAAOM,mBAAmB,IACvGkQ,EAAYzG,EAA6B0F,EAAG1J,QAAS/F,EAAOI,SAAWJ,EAAOK,eAAgBL,EAAOK,gBAAgB,EAAO,GAuBhI,GArBIiQ,EAAIG,MACJjJ,EAAMiC,WAAW6G,EAAIG,MAErBzQ,EAAOQ,WACP8P,EAAIG,KAAOnP,QAAQsI,YAAY8G,cAAc,OAAQ,CAAEC,MAAOH,EAAWI,MAAM,EAAGC,MAAON,EAAiBO,WAAW,GAAQtJ,GAC7H8I,EAAIG,KAAKxG,UAAU,IAAI3I,QAAQI,QAAQ,GAAI,IAAK,GAAI,EAAGJ,QAAQ4I,MAAMC,OACrEmG,EAAIG,KAAKzG,SAAWlK,EAAW,MAG/BwQ,EAAIS,QACJvJ,EAAMiC,WAAW6G,EAAIS,QAErB/Q,EAAOQ,WACP8P,EAAIS,OAASzP,QAAQsI,YAAY8G,cAAc,SAAU,CAAEC,MAAOH,EAAWI,MAAM,EAAGE,WAAW,GAAQtJ,GACzG8I,EAAIS,OAAO9G,UAAU,IAAI3I,QAAQI,QAAQ,GAAG,KAAQ,GAAI,EAAGJ,QAAQ4I,MAAMC,OACzEmG,EAAIS,OAAO/G,SAAWlK,EAAW,MAGjCwQ,EAAIU,SACJxJ,EAAMiC,WAAW6G,EAAIU,SAErBhR,EAAOW,QAAU,CACjB,IAAIiP,EAAM,GACV,IAAK,IAAKlG,EAAGC,KAAOJ,OAAOC,QAAQL,GAC/B,IAAK,IAAI7E,KAAKqF,EAAGsH,SACb,IAAK,IAAI1N,KAAKe,EACVsL,EAAIpK,KAAKjC,GAIrBkM,EAAGyB,WAAarB,EAAsBD,GAEtC,IAAIsB,EAAanH,EAA6B0F,EAAGyB,WAAY,EAAK,GAAK,GACvEZ,EAAIU,QAAU1P,QAAQsI,YAAY8G,cAAc,UAAW,CAAEC,MAAOO,EAAYN,MAAM,IAAKE,WAAW,GAAQtJ,GAC9G8I,EAAIU,QAAQ/G,UAAU,IAAI3I,QAAQI,QAAQ,GAAI,EAAK,GAAI,EAAGJ,QAAQ4I,MAAMC,OACxEmG,EAAIU,QAAQhH,SAAWlK,EAAU,IAGrC,IAAIqR,EAAY,GACZC,EAAgB,GACpB,IAAI,MAAOC,EAASjI,KAAQG,OAAOC,QAAQL,GAEnCgI,EAAU/H,EAAIkI,cACdH,EAAU/H,EAAIkI,YAAc,IAEhCH,EAAU/H,EAAIkI,YAAY9L,KAAK4D,GAInC,IAAI,MAAOmI,EAAMxF,KAAOxC,OAAOC,QAAQ2H,GAAY,CAC/C,IAAIpL,EAAU+F,EAA8BC,GAC5CqF,EAAc5L,KAAKuE,EAA6BhE,EAAQ,EAAI/F,EAAOM,mBAAkB,IAarFgQ,EAAIkB,OACJhK,EAAMiC,WAAW6G,EAAIkB,OAErBxR,EAAOS,YACP6P,EAAIkB,MAAQlQ,QAAQsI,YAAY8G,cAAc,QAAS,CAAEC,MAAOH,EAAWI,MAAM,IAAKC,MAAOO,GAAiB5J,GAC9G8I,EAAIkB,MAAMvH,UAAU,IAAI3I,QAAQI,QAAQ,EAAG,IAAK,GAAI,EAAGJ,QAAQ4I,MAAMC,OAErEmG,EAAIkB,MAAMxH,SAAWlK,EAAW,MAGhCwQ,EAAImB,OACJjK,EAAMiC,WAAW6G,EAAImB,OAGzB,IAAIC,EAAa,GACjB,IAAI,MAAOL,EAAS1H,KAAOJ,OAAOC,QAAQL,GACtCuI,EAAWlM,QAAQmE,EAAGgI,WAEtB3R,EAAOU,YACP4P,EAAImB,MAAQnQ,QAAQsI,YAAY8G,cAAc,QAAS,CAAEC,MAAOH,EAAWI,MAAM,IAAKC,MAAOa,GAAclK,GAE3G8I,EAAImB,MAAMzH,SAAWlK,EAAY,OAIlC,SAAS8R,KAnkBT,WACH,MAAMpK,EAAQ/H,EAAQ+H,MAChBiI,EAAKhQ,EAAQiQ,UAEnB,IAAIS,EAAO,CAAC,IAAU,KAClBD,EAAO,EAAE,KAAW,KAEpB2B,EAAa,GAEb1I,EAAM1J,EAAQE,WAAWC,KAE7B,IAAI,MAAO8J,EAAIC,KAAOJ,OAAOC,QAAQL,GAC7BQ,EAAGmI,QACHtK,EAAMiC,WAAWE,EAAGmI,QAG5B3I,EAAM1J,EAAQE,WAAWC,KAAO,GAIhC,IAAImS,EAAO,EACX,IAAK,MAAOrI,EAAIL,KAAME,OAAOC,QAAQiG,EAAGO,OAAOpQ,MAAO,CAG7CuJ,EAAIO,KACLP,EAAIO,GAAM,CAAC4H,WAAW,KAAK5H,GAAGA,EAClByG,KAAK,CAAC,IAAU,KAAWD,KAAK,EAAE,KAAW,KAC7C8B,UAAU,CAAC,IAAU,KAAWC,UAAU,EAAE,KAAW,KACvD5E,gBAAgB,KAGhC,IAAI1D,EAAKR,EAAIO,GAETwI,EAAY,EAAElS,EAAOC,QAAQ,GAAKD,EAAOG,OAAO,IAAMkJ,EAAEkB,MAAQ,IAAM,GACzEvK,EAAOC,QAAQ,GAAKD,EAAOG,OAAO,IAAMkJ,EAAEmB,OAAS,IAAM,GAKtD2H,EAAO,CAAC9I,EAAEnI,EAAIlB,EAAOG,OAAO,GAAK+R,EAAU,KAC7C7I,EAAEgH,EAAIrQ,EAAOG,OAAO,GAAK+R,EAAU,KAEjCzH,GADY,IAAInJ,QAAQI,QAAQyQ,EAAK,GAAI,EAAGA,EAAK,IACxC7Q,QAAQwJ,OAAOsH,YAC5B3H,EAASA,EAAOO,SAAS1J,QAAQwJ,OAAOC,YAAYoH,EAAK,GAAI,EAAGA,EAAK,KAC7C,GAApB9I,EAAEgJ,iBACF5H,EAASA,EAAOO,SAAS1J,QAAQwJ,OAAOC,aAAa1B,EAAEiJ,WAAatS,EAAOG,OAAO,GAAI,EAAGkJ,EAAEkJ,WAAavS,EAAOG,OAAO,KACtHsK,EAASA,EAAOO,SAAS1J,QAAQwJ,OAAOM,UAAU/B,EAAEgJ,eAAiBjR,KAAK+C,GAAK,MAC/EsG,EAASA,EAAOO,SAAS1J,QAAQwJ,OAAOC,YAAY1B,EAAEiJ,WAAatS,EAAOG,OAAO,GAAI,GAAIkJ,EAAEkJ,WAAavS,EAAOG,OAAO,MAE1HwJ,EAAG5D,QAAU,CACTzE,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASwQ,EAAU,GAAI,GAAIA,EAAU,IAAKzH,GAC3FnJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQwQ,EAAU,GAAI,GAAIA,EAAU,IAAKzH,GAC1FnJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQwQ,EAAU,GAAI,EAAGA,EAAU,IAAKzH,GACzFnJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASwQ,EAAU,GAAI,EAAGA,EAAU,IAAKzH,IAG9Fd,EAAGsH,SAAW,GACdtH,EAAGgI,UAAY,GAEfrH,EAAsBjB,EAAEkB,MAAMlB,EAAEmB,OAAOC,EAAOd,EAAGgI,UAAUhI,EAAGsH,UAE1DtH,EAAGmI,QACHtK,EAAMiC,WAAWE,EAAGmI,QAEpB9R,EAAOO,WACPoJ,EAAGmI,OAASxQ,QAAQsI,YAAY8G,cAAchH,EAAI,CAAEiH,MAAOhH,EAAG5D,QAAS6K,MAAO,EAAGE,WAAW,GAAStJ,GACrGmC,EAAGmI,OAAO7H,UAAU,IAAI3I,QAAQI,QAAQ,EAAG,KAAM,GAAI,EAAGJ,QAAQ4I,MAAMC,OAEnEd,EAAEmJ,SAAW/S,EAAQE,WAAWG,KAAKuJ,EAAEmJ,WACtC7I,EAAGmI,OAAO9H,SAAWvK,EAAQE,WAAWG,KAAKuJ,EAAEmJ,WAIvD7I,EAAGuC,UAAY,CACX5K,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASwQ,EAAU,GAAKlS,EAAOI,SAAU,GAAI8R,EAAU,GAAKlS,EAAOI,UAAWqK,GAC/HnJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQwQ,EAAU,GAAKlS,EAAOI,SAAU,GAAI8R,EAAU,GAAKlS,EAAOI,UAAWqK,GAC9HnJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,QAAQwQ,EAAU,GAAKlS,EAAOI,SAAU,EAAG8R,EAAU,GAAKlS,EAAOI,UAAWqK,GAC7HnJ,QAAQI,QAAQuJ,qBAAqB,IAAI3J,QAAQI,SAASwQ,EAAU,GAAKlS,EAAOI,SAAU,EAAG8R,EAAU,GAAKlS,EAAOI,UAAWqK,IAElIoH,EAAWrM,KAAKmE,EAAGuC,WAEnB,IAAK,IAAI3I,KAAKoG,EAAGuC,UACbvC,EAAGqI,UAAU,GAAK5Q,KAAKqR,IAAI9I,EAAGqI,UAAU,GAAIzO,EAAErC,GAC9CyI,EAAGsI,UAAU,GAAK7Q,KAAK2L,IAAIpD,EAAGsI,UAAU,GAAI1O,EAAErC,GAC9CyI,EAAGqI,UAAU,GAAK5Q,KAAKqR,IAAI9I,EAAGqI,UAAU,GAAIzO,EAAEpC,GAC9CwI,EAAGsI,UAAU,GAAK7Q,KAAK2L,IAAIpD,EAAGsI,UAAU,GAAI1O,EAAEpC,GAGlD,IAAK,IAAIoC,KAAKoG,EAAG5D,QACb4D,EAAGwG,KAAK,GAAK/O,KAAKqR,IAAI9I,EAAGwG,KAAK,GAAI5M,EAAErC,GACpCyI,EAAGuG,KAAK,GAAK9O,KAAK2L,IAAIpD,EAAGuG,KAAK,GAAI3M,EAAErC,GACpCyI,EAAGwG,KAAK,GAAK/O,KAAKqR,IAAI9I,EAAGwG,KAAK,GAAI5M,EAAEpC,GACpCwI,EAAGuG,KAAK,GAAK9O,KAAK2L,IAAIpD,EAAGuG,KAAK,GAAI3M,EAAEpC,GAExCgP,EAAK,GAAK/O,KAAKqR,IAAI9I,EAAGwG,KAAK,GAAIA,EAAK,IACpCD,EAAK,GAAK9O,KAAK2L,IAAIpD,EAAGuG,KAAK,GAAIA,EAAK,IACpCC,EAAK,GAAK/O,KAAKqR,IAAI9I,EAAGwG,KAAK,GAAIA,EAAK,IACpCD,EAAK,GAAK9O,KAAK2L,IAAIpD,EAAGuG,KAAK,GAAIA,EAAK,IAEpC,IAAIwC,EAAe,SAASC,EAAIC,EAAKC,EAAIC,GACrC,GAAIF,EAAIZ,UAAU,GAAG1Q,QAAQC,QAAUuR,EAAIb,UAAU,IAAMa,EAAId,UAAU,GAAG1Q,QAAQC,QAAUqR,EAAIX,UAAU,IACxGW,EAAIZ,UAAU,GAAG1Q,QAAQC,QAAUuR,EAAIb,UAAU,IAAMa,EAAId,UAAU,GAAG1Q,QAAQC,QAAUqR,EAAIX,UAAU,GACxG,OAAO,EAKX,IAAIc,EAAoB,CAACC,EAAK5J,KAC1B,IAAI,IAAI6J,EAAK,EAAGA,EAAKD,EAAI9G,UAAUxI,OAAQuP,IAAM,CAC7C,IAAIvG,EAAOsG,EAAI9G,WAAW+G,EAAG,GAAGD,EAAI9G,UAAUxI,QAAQvB,SAAS6Q,EAAI9G,UAAU+G,IACzEC,GAAU,EACVC,GAAU,EACd,IAAI,IAAI/C,EAAK,EAAGA,EAAKhH,EAAI8C,UAAUxI,OAAQ0M,IAAM,CAC7C,IAAIpN,EAAM1B,QAAQI,QAAQe,IAAIiK,EAAKtD,EAAI8C,UAAUkE,GAAIjO,SAAS6Q,EAAI9G,UAAU+G,KAC5EE,GAAWnQ,GAAO1B,QAAQC,QAC1B2R,GAAWlQ,EAAM1B,QAAQC,QAG7B,GAAI4R,GAAWD,EACX,OAAO,EAGf,OAAO,GAEPE,EAAwBL,EAAkBH,EAAIE,GAKlD,GAJIM,IACAA,EAAwBL,EAAkBD,EAAIF,IAG/CQ,EAGC,GAFAR,EAAIvF,gBAAgByF,EAAIpJ,IAAMoJ,EAC9BA,EAAIzF,gBAAgBuF,EAAIlJ,IAAMkJ,EAC3BA,EAAItB,YAAcwB,EAAIxB,WAAY,CAGjC,IAAI+B,EAAMT,EAAItB,WACVgC,EAAMR,EAAIxB,WACd,IAAI,MAAOD,EAASjI,KAAQG,OAAOC,QAAQL,GACpCC,EAAIkI,YAAcgC,IACjBlK,EAAIkI,WAAa+B,QAIrBT,EAAItB,WACRwB,EAAIxB,WAAasB,EAAItB,WAEjBwB,EAAIxB,WACRsB,EAAItB,WAAawB,EAAIxB,WAGrBsB,EAAItB,WAAawB,EAAIxB,WAAaS,KAK9C,IAAK,MAAOV,EAASjE,KAAY7D,OAAOC,QAAQL,GACzCkI,GAAW3H,GAKdgJ,EAAarJ,EAAEM,EADA8F,EAAGO,OAAOpQ,KAAKyR,GACHjE,GAG3BzD,EAAG2H,aACH3H,EAAG2H,WAAaS,KAIxBtC,EAAGO,OAAOC,OAAS,CAAEE,KAAMA,EAAMD,KAAMA,GAEvChH,IAyZAqK,GAEA/D,IAGG,SAASgE,EAAaC,GACzBC,MAAMD,GACDE,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IAEF,IAAIhU,EAAOL,EAAQE,WAAWG,KAE1B2P,EAAK,GACTA,EAAGsE,KAAOD,EAAKC,KACftE,EAAGK,kBAAmB,EACtBL,EAAGE,SAAW,SACdF,EAAG5P,KAAOiU,EAAKjU,KACf4P,EAAGO,OAAS,CAACpQ,KAAM,IACnB,IAAIoU,EAAO,EACX,IAAK,IAAI3K,KAAKyK,EAAKlU,KACfyJ,EAAEK,GAAK,MAAQsK,IAEXlU,EAAKuJ,EAAE/B,QACP2M,EAAsB5K,EAAE/B,MAAMhG,QAAQ4S,OAAOC,cAAc9K,EAAE/B,QAEjE+B,EAAEmJ,QAAUnJ,EAAE/B,MAEdmI,EAAGO,OAAOpQ,KAAKyJ,EAAEK,IAAML,EAE3B5J,EAAQiQ,UAAYD,ED1tBzB,WACH,IAAI3P,EAAOL,EAAQE,WAAWG,KAC1BuH,EAAO,SACXvH,EAAKuH,GAAQ,IAAI/F,QAAQ8S,iBAAiB/M,EAAM5H,EAAQ+H,OACxD1H,EAAKuH,GAAMgN,aAAe,IAAI/S,QAAQ4S,OAAO,EAAG,EAAG,GACnDpU,EAAKuH,GAAMiN,cAAgB,IAAIhT,QAAQ4S,OAAO,EAAG,EAAG,GACpDpU,EAAKuH,GAAMkN,cAAgB,IAAIjT,QAAQ4S,OAAO,EAAG,EAAG,GAEpD,IAAIM,EAAc,OAClB1U,EAAgB,KAAI,IAAIwB,QAAQiG,6BAA6BiN,EAAa/U,EAAQ+H,OAClF1H,EAAgB,KAAE2H,SAAW,EAC7B3H,EAAgB,KAAE4H,UAAY,GAC9B5H,EAAgB,KAAE6H,UAAY,IAAIrG,QAAQ4S,OAAO,GAAK,GAAK,IAC3DpU,EAAgB,KAAE8H,mBAAqBnI,EAAQoI,WAE/C,IAAI4M,EAAe,QACnB3U,EAAiB,MAAI,IAAIwB,QAAQiG,6BAA6BkN,EAAchV,EAAQ+H,OACpF1H,EAAiB,MAAE2H,SAAW,EAC9B3H,EAAiB,MAAE4H,UAAY,GAC/B5H,EAAiB,MAAE6H,UAAY,IAAIrG,QAAQ4S,OAAO,GAAK,GAAK,IAC5DpU,EAAiB,MAAE8H,mBAAqBnI,EAAQoI,WAEhD,IAAI6M,EAAa,MACjB5U,EAAe,IAAI,IAAIwB,QAAQiG,6BAA6BmN,EAAYjV,EAAQ+H,OAChF1H,EAAe,IAAE2H,SAAW,EAC5B3H,EAAe,IAAE4H,UAAY,GAC7B5H,EAAe,IAAE6H,UAAY,IAAIrG,QAAQ4S,OAAO,GAAG,IAAK,IAAI,IAAK,EAAE,KACnEpU,EAAe,IAAE8H,mBAAqBnI,EAAQoI,WAE9CT,EAAkB,MAAO,IAAI9F,QAAQ4S,OAAO,GAAK,GAAK,KC+rB9CS,GACA/C,ID7rBL,WACH,MAAMnC,EAAKhQ,EAAQiQ,UACnBjQ,EAAQ4I,OAAOE,UAAU,IAAIjH,QAAQI,QAAQ+N,EAAGO,OAAOC,OAAOE,KAAK,IAAMV,EAAGO,OAAOC,OAAOC,KAAK,GAAKT,EAAGO,OAAOC,OAAOE,KAAK,IAAM,EAC5H,EACAV,EAAGO,OAAOC,OAAOE,KAAK,IAAMV,EAAGO,OAAOC,OAAOC,KAAK,GAAKT,EAAGO,OAAOC,OAAOE,KAAK,IAAM,IACvF1Q,EAAQ4I,OAAOuM,OAASxT,KAAK+C,GAAK,EAClC1E,EAAQ4I,OAAOwM,KAAO,EACtBpV,EAAQ4I,OAAOyM,OAAS,ICurBhBC,MCvuBL,MAAMC,EAAU,CACnBC,UAAW,SAASC,EAAKC,EAAQC,GAC7BA,EAAQA,GAAY,GACpB,IAAIC,EAAS/T,QAAQgU,IAAIC,OAAOC,mBAAmB,SAAUN,GAe7D,OAdAG,EAAOI,IAAM,MACbJ,EAAOK,KAAO,MACdL,EAAO9K,MAAQ6K,EAAM7K,MAAM6K,EAAM7K,MAAM,OACvC8K,EAAO7K,OAAS4K,EAAM5K,OAAO4K,EAAM5K,OAAO,KAC1C6K,EAAOM,aAAe,EACtBN,EAAOO,UAAY,EACnBP,EAAOQ,SAAS,GAAGvO,MAAQ,UAC3B+N,EAAOQ,SAAS,GAAGC,SAAW,GAC9BT,EAAO/N,MAAQ,UACf+N,EAAOU,WAAa,UAGpBV,EAAOW,yBAAyB9S,IAAIiS,GAE7BE,GAEXY,SAAU,SAASf,GACf,IAAIjR,EAAI,IAAI3C,QAAQgU,IAAIY,UAMxB,OALAjS,EAAEsG,MAAQ,OACVtG,EAAEuG,OAAS,KACXvG,EAAEkS,KAAOjB,EACTjR,EAAEqD,MAAQ,QACVrD,EAAE6R,SAAW,GACN7R,GAEXmS,mBAAoB,SAASlB,EAAKmB,GAC9B,OAAOrB,EAAQC,UAAUC,GAAK,WAC1B,IAAK,IAAIoB,KAAO7W,EAAQC,WAAY,CAChC,IACI2J,EADK5J,EAAQiQ,UACNM,OAAOpQ,KAAK0W,GACvBD,EAAUhN,GAEdkN,QAGRC,MAAM,CACFC,IAAM,CACFvT,IAAK,WAED,IAAIwT,EAAU,IAAIpV,QAAQgU,IAAIqB,WAC9BD,EAAQlM,OAAS,KACjBkM,EAAQE,kBAAmB,EAC3BF,EAAQG,YAAa,EAErBH,EAAQI,kBAAoBxV,QAAQgU,IAAIyB,QAAQC,0BAEhDN,EAAQO,WAAWjC,EAAQiB,SAAS,UACpCS,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEnI,GAAK,OACjEwV,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEgH,GAAK,OACjEqG,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEgH,GAAK,OACjEqG,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEnI,GAAK,OAGjEwV,EAAQO,WAAWjC,EAAQiB,SAAS,UACpCS,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEgJ,gBAAkB,KAC9EqE,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEgJ,gBAAkB,KAE9EqE,EAAQO,WAAWjC,EAAQiB,SAAS,QACpCS,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEkB,OAAS,OACrEmM,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEkB,OAAS,OAErEmM,EAAQO,WAAWjC,EAAQiB,SAAS,QACpCS,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEmB,QAAU,OACtEkM,EAAQO,WAAWjC,EAAQoB,mBAAmB,KAAM/M,GAAMA,EAAEmB,QAAU,OAEtE/K,EAAQyX,UAAUD,WAAWP,GAC7B1B,EAAQmC,eAAiBT,IAGjC7W,KAAO,CACHqD,IAAK,WAED,IAAIwT,EAAU,IAAIpV,QAAQgU,IAAIqB,WAC9BD,EAAQlM,OAAS,KACjBkM,EAAQE,kBAAmB,EAC3BF,EAAQG,YAAa,EACrBH,EAAQI,kBAAoBxV,QAAQgU,IAAIyB,QAAQC,0BAEhDN,EAAQO,WAAWjC,EAAQiB,SAAS,WAEpC,IAAImB,EAAW,SAASjB,EAAMkB,GAE1B,IAAIhC,EAAS,IAAI/T,QAAQgU,IAAIgC,YAC7BjC,EAAO9K,MAAQ,OACf8K,EAAO7K,OAAS,OAChB6K,EAAO/N,MAAQ,QACf+N,EAAOU,WAAa,QAEpBV,EAAOkC,6BAA6BrU,KAAI,SAASsU,GAC1CA,IACC/X,EAAQiQ,UAAUC,SAAWwG,EAC7BsB,QAIR,IAAIC,EAASpW,QAAQgU,IAAIyB,QAAQY,UAAUtC,EAAQc,EAAM,QAAS,CAAEyB,cAAc,EAAMC,cAAc,IACtGH,EAAOlN,OAAS,OAEhB6M,EAAOJ,WAAWS,IAItB,IAAII,EAAY,IAAIxW,QAAQgU,IAAIqB,WAChCmB,EAAUtN,OAAS,IACnBsN,EAAUvN,MAAQ,QAClBuN,EAAUjB,YAAa,EACvBO,EAAS,YAAaU,GACtBV,EAAS,SAAUU,GACnBV,EAAS,UAAWU,GACpBpB,EAAQO,WAAWa,GAEnB,IAAIC,EAAW,IAAIzW,QAAQgU,IAAI0C,SAC/BD,EAASxN,MAAQ,OACjBwN,EAASvN,OAAS,OAClBuN,EAASE,WAAY,EACrBF,EAASzQ,MAAQ,QACjByQ,EAASR,6BAA6BrU,KAAI,SAASgV,GAC/CzY,EAAQiQ,UAAUI,iBAAmBoI,EACrCT,OAGJf,EAAQO,WAAWjC,EAAQiB,SAAS,UACpCS,EAAQO,WAAWc,GAEnBtY,EAAQyX,UAAUD,WAAWP,GAC7B1B,EAAQmC,eAAiBT,IAGjCyB,QAAU,CACNjV,IAAK,WAED,IAAIwT,EAAU,IAAIpV,QAAQgU,IAAIqB,WAC9BD,EAAQlM,OAAS,KACjBkM,EAAQE,kBAAmB,EAC3BF,EAAQG,YAAa,EAErBH,EAAQI,kBAAoBxV,QAAQgU,IAAIyB,QAAQC,0BAEhD,IAAI9B,EAAMF,EAAQiB,SAAS,6GAE3Bf,EAAI3K,MAAQ,SACZmM,EAAQO,WAAW/B,GAEnBzV,EAAQyX,UAAUD,WAAWP,GAC7B1B,EAAQmC,eAAiBT,KAIrC0B,WAAY,SAASC,GACdrD,EAAQmC,gBACP1X,EAAQyX,UAAUoB,cAActD,EAAQmC,gBAEzCnC,EAAQwB,MAAM6B,IACbrD,EAAQwB,MAAM6B,GAAMnV,OAG5BqV,WAAY,WACR,IAAI7B,EAAU,IAAIpV,QAAQgU,IAAIqB,WAC9BD,EAAQlM,OAAS,KACjBkM,EAAQE,kBAAmB,EAC3BF,EAAQG,YAAa,EAErBH,EAAQI,kBAAoBxV,QAAQgU,IAAIyB,QAAQyB,uBAEhD9B,EAAQO,WAAWjC,EAAQC,UAAU,UAAU,KAAOD,EAAQoD,WAAW,SAAS,CAAC5N,OAAO,IAAID,MAAM,WACpGmM,EAAQO,WAAWjC,EAAQC,UAAU,QAAQ,KAAOD,EAAQoD,WAAW,UAAU,CAAC5N,OAAO,IAAID,MAAM,WACnGmM,EAAQO,WAAWjC,EAAQC,UAAU,OAAO,KAAOD,EAAQoD,WAAW,SAAS,CAAC5N,OAAO,IAAID,MAAM,WACjGmM,EAAQO,WAAWjC,EAAQC,UAAU,SAAS,KAAOD,EAAQoD,WAAW,aAAa,CAAC5N,OAAO,IAAID,MAAM,WAEvGyK,EAAQyD,SAAW/B,EACnBjX,EAAQyX,UAAUD,WAAWP,KClGrCgC,OAAOC,iBAAiB,oBAAoB,YAzE5C,WACIC,IAEAnZ,EAAQyX,UAAY5V,QAAQgU,IAAIuD,uBAAuBC,mBAAmB,YAE1E9D,EAAQuD,aAGR9Y,EAAQyI,OAAO6Q,eAAc,WACzBtZ,EAAQ+H,MAAMwR,YAGlB,IAAIC,EAAY,CACZ,sBACA,sBACA,qBACA,yBACA,yBACA,8BACA,0BACA,6BACA,8BACA,qBACA,qBACA,uBACA,6BACA,4BAEAC,EAAS,GAGbC,EAAsBF,EAAUC,IAGhCR,OAAOC,iBAAiB,UAAU,WAC9BlZ,EAAQyI,OAAOkR,YAGnBV,OAAOC,iBAAiB,WAAWU,IACd,KAAbA,EAAM5C,MACHhX,EAAQ+H,MAAM8R,WAAWC,YACxB9Z,EAAQ+H,MAAM8R,WAAWE,OAEzB/Z,EAAQ+H,MAAM8R,WAAWG,QAGhB,KAAbJ,EAAM5C,MACNzW,EAAOO,SAAWP,EAAOO,SAAS,KAAK,SACvCgW,KAEa,KAAb8C,EAAM5C,MACNzW,EAAOQ,UAAWR,EAAOQ,SACzB+V,KAEa,KAAb8C,EAAM5C,MACNzW,EAAOU,WAAYV,EAAOU,UAC1B6V,KAEa,KAAb8C,EAAM5C,MACNzW,EAAOW,SAAUX,EAAOW,QACxB4V,KAEa,KAAb8C,EAAM5C,MACNzW,EAAOS,WAAYT,EAAOS,UAC1B8V,KAEa,KAAb8C,EAAM5C,MACNyC,GAAUA,EAAO,GAAGD,EAAUvV,OAC9ByV,EAAsBF,EAAUC,QAMxCQ,MAMJhB,OAAOC,iBAAiB,SAAS,SAAUgB,GACvC,MAAMnS,EAAQ/H,EAAQ+H,MACtB,IAAIoS,EAAapS,EAAMqS,KAAKrS,EAAMsS,SAAUtS,EAAMuS,UAE9CH,GAAcA,EAAWI,YACrBva,EAAQiQ,UAAUM,OAAOpQ,KAAKga,EAAWI,WAAW3S,QAEhDsS,EAAEM,SAAWN,EAAEO,QACXza,EAAQC,WAAWya,QAAQP,EAAWI,WAAW3S,MAAQ,EACzD5H,EAAQC,WAAWuN,OAAOxN,EAAQC,WAAWya,QAAQP,EAAWI,WAAW3S,MAAO,GAGlF5H,EAAQC,WAAW8F,KAAKoU,EAAWI,WAAW3S,MAIlD5H,EAAQC,WAAa,CAACka,EAAWI,WAAW3S,MAEhD+C,QAAQC,IAAI,cAAgBuP,EAAWI,WAAW3S,MAClD+S"}