{"version":3,"file":"pack.js","sources":["../../src/globals.js","../../src/tuning.js","../../src/coremath.js","../../src/gfx.js","../../src/boardOps.js","../../src/ui.js","../../src/base.js"],"sourcesContent":["export const globals = {\n    pickedKeys: [],\n    renderData: { keys: {}, case: {}, mats: {}, outlines: {} }\n}","export const tuning = {\n    keyDims: [18.0, 18.0],\n    switchCutout: [14.0, 14.0],\n    base1U: [19.05, 19.05],\n    bezelGap: 1.05,\n    bezelThickness: 5,\n    bezelCornerFillet: 0.5,\n    keyShape:\"square\",\n    drawCase:true,\n    drawBezel:true,\n    drawPlate:true\n}","\nexport function lineLineIntersection(p0, d0, p1, d1) {\n    let det = d0.x * d1.z - d1.x * d0.z;\n    if (det < BABYLON.Epsilon) // no collision\n    {\n        return null;\n    }\n\n    let prevC = p0.x * d0.x + p0.z * d0.z;\n    let nextC = p1.x * d1.x + p1.z * d1.z;\n    let intersection = new BABYLON.Vector3((d1.z * prevC - d0.z * nextC) / det, 0,\n        (d0.x * nextC - d1.x * prevC) / det);\n\n    return intersection;\n}\n\nexport function rayToSegment(x0, xL, xNorm, y0, y1) {\n    //let xL = x1.subtract(x0);\n    let yL = y1.subtract(y0);\n    //let xNorm = (new BABYLON.Vector3(xL.z, 0, -xL.x)).normalize();\n    let yNorm = (new BABYLON.Vector3(yL.z, 0, -yL.x)).normalize();\n\n    let intersection = lineLineIntersection(x0,xNorm,y0,yNorm);\n    if(intersection) {\n        let intLenSq = intersection.subtract(y0).lengthSquared();\n        if(intLenSq > -BABYLON.Epsilon && intLenSq < yL.lengthSquared() - BABYLON.Epsilon) {\n            return intersection;\n        }\n    }\n    return null;\n}\n\n// only convex\nexport function isPointInPoly(p, poly) {\n    for(let i = 0; i < poly.length; i++) {\n        let point = poly[i];\n        let next = poly[(i + 1) % poly.length];\n        let nextDir = next.subtract(point).normalize();\n        let nextNorm = new BABYLON.Vector3(nextDir.z, 0, -nextDir.x);\n        let pV = p.subtract(point).normalize();\n        let d = BABYLON.Vector3.Dot(pV,nextNorm)\n        if( d > BABYLON.Epsilon) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function getRotFromNormal(norm) {\n    let t = Math.acos(norm.x);\n    if (norm.z < 0) t = 2 * Math.PI - t;\n    return t;\n}\n\nexport function getNormalFromRot(rot) {\n    return new BABYLON.Vector3(Math.cos(rot), 0, Math.sin(rot));\n}\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nfunction orient(a, b, c) {\n    var l = (a.z - c.z) * (b.x - c.x)\n    var r = (a.x - c.x) * (b.z - c.z)\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return 0\n  }\n\n// convex hull of points on the x/z plane\nexport function convexHull2d(points) {\n    var n = points.length\n\n    if (n < 3) {\n        var result = new Array(n)\n        for (var i = 0; i < n; ++i) {\n            result[i] = i\n        }\n\n        if (n === 2 &&\n            points[0].x === points[1].x &&\n            points[0].z === points[1].z) {\n            return [0]\n        }\n\n        return result\n    }\n\n    //Sort point indices along x-axis\n    var sorted = new Array(n)\n    for (var i = 0; i < n; ++i) {\n        sorted[i] = i\n    }\n    sorted.sort(function (a, b) {\n        var d = points[a].x - points[b].x\n        if (d) {\n            return d\n        }\n        return points[a].z - points[b].z\n    })\n\n    //Construct upper and lower hulls\n    var lower = [sorted[0], sorted[1]]\n    var upper = [sorted[0], sorted[1]]\n\n    for (var i = 2; i < n; ++i) {\n        var idx = sorted[i]\n        var p = points[idx]\n\n        //Insert into lower list\n        var m = lower.length\n        while (m > 1 && orient(\n                                points[lower[m - 2]],\n                                points[lower[m - 1]],\n                                p) <= 0) {\n            m -= 1\n            lower.pop()\n        }\n        lower.push(idx)\n\n        //Insert into upper list\n        m = upper.length\n        while (m > 1 && orient(\n            points[upper[m - 2]],\n            points[upper[m - 1]],\n            p) >= 0) {\n            m -= 1\n            upper.pop()\n        }\n        upper.push(idx)\n    }\n\n    //Merge lists together\n    var result = new Array(upper.length + lower.length - 2)\n    var ptr = 0\n    for (var i = 0, nl = lower.length; i < nl; ++i) {\n        result[ptr++] = lower[i]\n    }\n    for (var j = upper.length - 2; j > 0; --j) {\n        result[ptr++] = upper[j]\n    }\n\n    let pList = [];\n    for( const i of result ) {\n        pList.unshift(points[i])\n    }\n\n    //Return result\n    return pList\n}\n\n// offset is + to the left, - to right (right won't work right now)\nexport function genArrayFromOutline(outline, offset, fillets, close, segments) {\n    let outPoints = [];\n    //todo turn fillets into array if it's just a value\n    if (!segments) {\n        segments = 4;\n    }\n\n    for (let i = 0; i < outline.length; i++) {\n        let point = outline[i];\n        let next = outline[(i + 1) % outline.length];\n        let prev = outline[(i - 1 + outline.length) % outline.length];\n        let nextDir = next.subtract(point).normalize();\n        let prevDir = point.subtract(prev).normalize();\n        let nextNorm = new BABYLON.Vector3(nextDir.z, 0, -nextDir.x);\n        let prevNorm = new BABYLON.Vector3(prevDir.z, 0, -prevDir.x);\n        let inPoint = point.add(prevNorm.scale(offset));\n        let outPoint = point.add(nextNorm.scale(offset));\n\n        let intersection = lineLineIntersection(inPoint, prevNorm,\n            outPoint, nextNorm);\n        if (intersection === null) {\n            outPoints.push(inPoint);\n            outPoints.push(outPoint);\n            continue;\n        }\n\n        if (!fillets) {\n            outPoints.push(intersection);\n        }\n        else {\n            let fillet = fillets;\n            let filletCenter = lineLineIntersection(inPoint.add(prevNorm.scale(-fillet)), prevNorm,\n                outPoint.add(nextNorm.scale(-fillet)), nextNorm);\n\n\n            let startRot = getRotFromNormal(prevNorm);\n            let endRot = getRotFromNormal(nextNorm);\n            if (endRot < startRot) {\n                endRot += Math.PI * 2;\n            }\n            let rotStep = (endRot - startRot) / segments;\n\n            for (let i = 0; i <= segments; i++) {\n                outPoints.push(filletCenter.add(getNormalFromRot(startRot + rotStep * i).scale(fillet)));\n            }\n        }\n    }\n\n    if (close) {\n        outPoints.push(outPoints[0]);\n    }\n\n    return outPoints;\n}","import {globals} from './globals.js'\nimport {tuning} from './tuning.js'\n\nexport function createKeyMaterial(name,color) {\n    let mats = globals.renderData.mats;\n    mats[name] = new BABYLON.PBRMetallicRoughnessMaterial(name, globals.scene);\n    mats[name].metallic = 0;\n    mats[name].roughness = 0.6;\n    mats[name].baseColor = color;\n    mats[name].environmentTexture = globals.hdrTexture;\n}\n\nexport function createMaterials() {\n    let mats = globals.renderData.mats;\n    let name = \"keySel\";\n    mats[name] = new BABYLON.StandardMaterial(name, globals.scene);\n    mats[name].diffuseColor = new BABYLON.Color3(0, 0, 0);\n    mats[name].emissiveColor = new BABYLON.Color3(1, 0, 0);\n    mats[name].specularColor = new BABYLON.Color3(0, 0, 0);\n\n    let caseMatName = \"case\";\n    mats[caseMatName] = new BABYLON.PBRMetallicRoughnessMaterial(caseMatName, globals.scene);\n    mats[caseMatName].metallic = 1;\n    mats[caseMatName].roughness = 0.8;\n    mats[caseMatName].baseColor = new BABYLON.Color3(0.6, 0.6, 0.6);\n    mats[caseMatName].environmentTexture = globals.hdrTexture;\n\n    let plateMatName = \"plate\";\n    mats[plateMatName] = new BABYLON.PBRMetallicRoughnessMaterial(plateMatName, globals.scene);\n    mats[plateMatName].metallic = 1;\n    mats[plateMatName].roughness = 0.2;\n    mats[plateMatName].baseColor = new BABYLON.Color3(0.5, 0.5, 0.5);\n    mats[plateMatName].environmentTexture = globals.hdrTexture;\n\n    createKeyMaterial(\"key\", new BABYLON.Color3(0.9, 0.9, 0.9));\n}\n\nexport function snapCamera() {\n    const bd = globals.boardData;\n    globals.camera.setTarget(new BABYLON.Vector3(bd.layout.bounds.mins[0] + (bd.layout.bounds.maxs[0] - bd.layout.bounds.mins[0]) / 2.0,\n        0,\n        bd.layout.bounds.mins[1] + (bd.layout.bounds.maxs[1] - bd.layout.bounds.mins[1]) / 2.0));\n    globals.camera.alpha = -Math.PI / 2;\n    globals.camera.beta = 0;\n    globals.camera.radius = 300;\n}\n\nfunction createScene() {\n    const engine = globals.engine;\n\n    // create a basic BJS Scene object\n    var scene = new BABYLON.Scene(engine);\n\n    var camera = new BABYLON.ArcRotateCamera(\"Camera\", -Math.PI / 2, 0, 10, new BABYLON.Vector3(0, 0, 0), scene);\n\n    // target the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n\n    // attach the camera to the canvas\n    camera.attachControl(globals.canvas, false);\n\n    globals.camera = camera;\n\n    // create a basic light, aiming 0,1,0 - meaning, to the sky\n    // var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0, 1, 0), scene);\n    // // Default intensity is 1. Let's dim the light a small amount\n    // light.intensity = 0.7;\n    var skyboxPath = \"assets/environment.dds\";\n    globals.hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData(skyboxPath, scene);\n    globals.currentSkybox = scene.createDefaultSkybox(globals.hdrTexture, true, (scene.activeCamera.maxZ - scene.activeCamera.minZ) / 2, 0.3);\n\n    // return the created scene\n    return scene;\n}\n\nexport function init() {\n    // get the canvas DOM element\n    globals.canvas = document.getElementById('renderCanvas');\n\n    // load the 3D engine\n    globals.engine = new BABYLON.Engine(globals.canvas, true);\n\n    // call the createScene function\n    globals.scene = createScene();\n}\n","import {globals} from './globals.js'\nimport {tuning} from './tuning.js'\nimport * as coremath from './coremath.js'\nimport * as gfx from './gfx.js'\n\nexport function refreshOutlines() {\n    let kRD = globals.renderData.keys;\n    let oRD = globals.renderData.outlines;\n    let mats = globals.renderData.mats;\n\n    for (const [k, o] of Object.entries(oRD)) {\n        globals.scene.removeMesh(o);\n    }\n\n    for (const id of globals.pickedKeys) {\n        if (!kRD[id]) {\n            console.log(\"picked nonexistant key\");\n        }\n        else {\n            let rd = kRD[id];\n\n            oRD[id] = BABYLON.MeshBuilder.CreateRibbon(id + \"outline\",\n                {\n                    pathArray: [coremath.genArrayFromOutline(rd.outline, 0.1, 0.1, true),\n                        coremath.genArrayFromOutline(rd.outline, 0.5, 0.5, true)]\n                }, globals.scene);\n            oRD[id].material = mats[\"keySel\"];\n            oRD[id].translate(new BABYLON.Vector3(0, 10.5, 0), 1, BABYLON.Space.LOCAL);\n        }\n    }\n}\n\nexport function refreshLayout() {\n    const scene = globals.scene;\n    const bd = globals.boardData;\n\n    let mins = [100000.0, 100000.0]\n    let maxs = [-100000.0, -100000.0];\n\n    let bezelHoles = [];\n\n    let kRD = globals.renderData.keys;\n    // clear the renderdata (cache this later?)\n    for(const [id, rd] of Object.entries(kRD)) {\n        if (rd.keycap) {\n            scene.removeMesh(rd.keycap);\n        }\n    }\n    kRD = globals.renderData.keys = [];\n    \n    let outlines = [];\n\n    let kgID = 0;\n    for (const [id, k] of Object.entries(bd.layout.keys)) {\n        // console.log(k);\n\n        if (!kRD[id]) {\n            kRD[id] = {keyGroupId:null,id:id,\n                        mins:[100000.0, 100000.0], maxs:[-100000.0, -100000.0],\n                        bezelMins:[100000.0, 100000.0], bezelMaxs:[-100000.0, -100000.0],\n                        overlappingKeys:{}\n                    };\n        }\n        let rd = kRD[id];\n\n        let keycapDim = [(tuning.keyDims[0] + tuning.base1U[0] * (k.width - 1)) / 2,\n        (tuning.keyDims[1] + tuning.base1U[1] * (k.height - 1)) / 2];\n\n        // let uDim = [(tuning.base1U[0] + tuning.base1U[0] * (k.width - 1)) / 2,\n        // (tuning.base1U[1] + tuning.base1U[1] * (k.height - 1)) / 2];\n\n        let kPos = [k.x * tuning.base1U[0] + keycapDim[0],\n        -(k.y * tuning.base1U[1] + keycapDim[1])]\n        let kPosition = new BABYLON.Vector3(kPos[0], 0, kPos[1]);\n        let kXform = BABYLON.Matrix.Identity();\n        kXform = kXform.multiply(BABYLON.Matrix.Translation(kPos[0], 0, kPos[1]));\n        if (k.rotation_angle != 0) {\n            kXform = kXform.multiply(BABYLON.Matrix.Translation(-k.rotation_x * tuning.base1U[0], 0, k.rotation_y * tuning.base1U[1]));\n            kXform = kXform.multiply(BABYLON.Matrix.RotationY(k.rotation_angle * Math.PI / 180.0))\n            kXform = kXform.multiply(BABYLON.Matrix.Translation(k.rotation_x * tuning.base1U[0], 0, -k.rotation_y * tuning.base1U[1]));\n        }\n        rd.outline = [\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0], 0, -keycapDim[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0], 0, -keycapDim[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0], 0, keycapDim[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0], 0, keycapDim[1]), kXform)\n        ];\n\n        let switchCutDims = [tuning.switchCutout[0]*0.5, tuning.switchCutout[1]*0.5];\n        rd.switchCut = [\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-switchCutDims[0], 0, -switchCutDims[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(switchCutDims[0], 0, -switchCutDims[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(switchCutDims[0], 0, switchCutDims[1]), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-switchCutDims[0], 0, switchCutDims[1]), kXform)\n        ];\n\n        if (rd.keycap) {\n            scene.removeMesh(rd.keycap);\n        }\n        if (tuning.keyShape) {\n            rd.keycap = BABYLON.MeshBuilder.CreatePolygon(id, { shape: rd.outline, depth: 7, updatable: false }, scene);\n            rd.keycap.translate(new BABYLON.Vector3(0, 10.5, 0), 1, BABYLON.Space.LOCAL);\n    \n            if(k.matName && globals.renderData.mats[k.matName]) {\n                rd.keycap.material = globals.renderData.mats[k.matName];\n            }\n        }\n\n        rd.bezelHole = [\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0] - tuning.bezelGap, 0, -keycapDim[1] - tuning.bezelGap), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0] + tuning.bezelGap, 0, -keycapDim[1] - tuning.bezelGap), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(keycapDim[0] + tuning.bezelGap, 0, keycapDim[1] + tuning.bezelGap), kXform),\n            BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(-keycapDim[0] - tuning.bezelGap, 0, keycapDim[1] + tuning.bezelGap), kXform)\n        ];\n        bezelHoles.push(rd.bezelHole);\n\n        for (let p of rd.bezelHole) {\n            rd.bezelMins[0] = Math.min(rd.bezelMins[0], p.x);\n            rd.bezelMaxs[0] = Math.max(rd.bezelMaxs[0], p.x);\n            rd.bezelMins[1] = Math.min(rd.bezelMins[1], p.z);\n            rd.bezelMaxs[1] = Math.max(rd.bezelMaxs[1], p.z);\n        }\n\n        for (let p of rd.outline) {\n            rd.mins[0] = Math.min(rd.mins[0], p.x);\n            rd.maxs[0] = Math.max(rd.maxs[0], p.x);\n            rd.mins[1] = Math.min(rd.mins[1], p.z);\n            rd.maxs[1] = Math.max(rd.maxs[1], p.z);\n        }\n        mins[0] = Math.min(rd.mins[0], mins[0]);\n        maxs[0] = Math.max(rd.maxs[0], maxs[0]);\n        mins[1] = Math.min(rd.mins[1], mins[1]);\n        maxs[1] = Math.max(rd.maxs[1], maxs[1]);\n\n        let checkOverlap = function(k1, rd1, k2, rd2) {\n            if( rd1.bezelMins[0]+BABYLON.Epsilon > rd2.bezelMaxs[0] || rd2.bezelMins[0]+BABYLON.Epsilon > rd1.bezelMaxs[0] ||\n                rd1.bezelMins[1]+BABYLON.Epsilon > rd2.bezelMaxs[1] || rd2.bezelMins[1]+BABYLON.Epsilon > rd1.bezelMaxs[1] ) {\n                return false\n            }\n\n            // see if any of the lines bisect the other rect  (since it's a rect, we know each line is actually a normal of the previous)\n\n            let checkIntersection = (pRD, oRD) => {\n                for(let iP = 0; iP < pRD.bezelHole.length; iP++) {\n                    let line = pRD.bezelHole[(iP+1)%pRD.bezelHole.length].subtract(pRD.bezelHole[iP]);\n                    let allLess = true;\n                    let allMore = true;\n                    for(let oP = 0; oP < oRD.bezelHole.length; oP++) {\n                        let dot = BABYLON.Vector3.Dot(line,oRD.bezelHole[oP].subtract(pRD.bezelHole[iP]));\n                        allMore &= dot > -BABYLON.Epsilon;\n                        allLess &= dot < BABYLON.Epsilon;\n                    }\n    \n                    if( allMore || allLess ) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            let confirmedIntersection = checkIntersection(rd1,rd2);\n            if(!confirmedIntersection) {\n                confirmedIntersection = checkIntersection(rd2,rd1);\n            }\n\n            if(confirmedIntersection) {\n                rd1.overlappingKeys[rd2.id] = rd2;\n                rd2.overlappingKeys[rd1.id] = rd1;\n                if(rd1.keyGroupId && rd2.keyGroupId) {\n                    // merge\n                    // console.log(`merging kgIDs ${rd1.keyGroupId} and ${rd2.keyGroupId}`);\n                    let pKG = rd1.keyGroupId;\n                    let oKG = rd2.keyGroupId;\n                    for(const [otherId, oRD] of Object.entries(kRD)) {\n                        if(oRD.keyGroupId == oKG) {\n                            oRD.keyGroupId = pKG;\n                        }\n                    }\n                }\n                else if(rd1.keyGroupId) {\n                    rd2.keyGroupId = rd1.keyGroupId;\n                }\n                else if(rd2.keyGroupId) {\n                    rd1.keyGroupId = rd2.keyGroupId;\n                }\n                else {\n                    rd1.keyGroupId = rd2.keyGroupId = kgID++;\n                }\n            }\n        }\n\n        for (const [otherId, otherRD] of Object.entries(kRD)) {\n            if(otherId == id) {\n                continue;\n            }\n\n            let otherKey = bd.layout.keys[otherId];\n            checkOverlap(k,rd,otherKey,otherRD);\n        }\n\n        if(!rd.keyGroupId) {\n            rd.keyGroupId = kgID++;\n        }\n    }\n\n    bd.layout.bounds = { mins: mins, maxs: maxs };\n\n    refreshOutlines();\n}\n\nfunction getCombinedOutlineFromRDGroup(KG) {\n    for( const rd of KG ) {\n        rd.outlineLines = [];\n        if(rd.id == \"key57\") {\n            console.log(\"found it\");\n        }\n        rd.parsedOutlineLines = {};\n        for(let p = 0; p < rd.bezelHole.length; p++) {\n            let lStart = rd.bezelHole[p];\n            let lEnd = rd.bezelHole[(p+1)%rd.bezelHole.length]\n            rd.outlineLines.push([lStart,lEnd]);\n        }\n\n        for( const [oId,otherRD] of Object.entries(rd.overlappingKeys) ) {\n            for(let iL = rd.outlineLines.length - 1; iL >= 0; iL--) {\n                let l = rd.outlineLines[iL];\n                let lL = l[1].subtract(l[0]);\n                let lNorm = new BABYLON.Vector3(lL.z,0,-lL.x).normalize();\n                let isStartInPoly = coremath.isPointInPoly(l[0],otherRD.bezelHole);\n                let isEndInPoly = coremath.isPointInPoly(l[1],otherRD.bezelHole)\n                if(isStartInPoly) {\n                    if(isEndInPoly) {\n                        // both are inside the poly, just remove the line\n                        // console.log(`removing line ${iL} from ${rd.id}`);\n                        rd.outlineLines.splice(iL, 1);\n                    }\n                    let minExitT = 100000.0;\n                    let bestIntersection = null;\n                    for(let iOP = 0; iOP < otherRD.bezelHole.length; iOP++) {\n                        let intersection = coremath.rayToSegment(l[0], lL, lNorm, otherRD.bezelHole[iOP], otherRD.bezelHole[(iOP+1)%otherRD.bezelHole.length]);\n                        if(intersection) {\n                            let t = intersection.subtract(l[0]).lengthSquared();\n                            if( t > BABYLON.Epsilon && t < minExitT ) {\n                                minExitT = t;\n                                bestIntersection = intersection;\n                            }\n                        }\n                    }\n                    if (bestIntersection) {\n                        // console.log(`trimming line ${iL} from ${rd.id} to ${minExitT}`);\n                        l[0] = bestIntersection;\n                    }\n                    // else { console.log(`FAILED TO TRIM ${iL} from ${rd.id}`); }\n                }\n                else if(isEndInPoly) {\n                    let revLine = l[0].subtract(l[1])\n                    let revNorm = new BABYLON.Vector3(revLine.z,0,-revLine.x).normalize();\n                    let minExitT = 100000.0;\n                    let bestIntersection = null;\n                    for(let iOP = 0; iOP < otherRD.bezelHole.length; iOP++) {\n                        let intersection = coremath.rayToSegment(l[1], revLine, revNorm, otherRD.bezelHole[iOP], otherRD.bezelHole[(iOP+1)%otherRD.bezelHole.length]);\n                        if( intersection ) {\n                            let t = intersection.subtract(l[1]).lengthSquared();\n                            if( t > BABYLON.Epsilon && t < minExitT ) {\n                                minExitT = t;\n                                bestIntersection = intersection;\n                            }\n                        }\n                    }\n                    if (bestIntersection) {\n                        // console.log(`rev trimming line ${iL} from ${rd.id} to ${minExitT}`);\n                        l[1] = bestIntersection;\n                    }\n                    // else {console.log(`FAILED TO REV TRIM ${iL} from ${rd.id}`); }\n                }\n                else {\n                    // else neither end is in the poly and we should do full seg->seg checks if we're worried about this\n                    // turns out, we should be worried about this. :/\n                }\n            }\n        }\n    }\n\n\n    // let maxOverlapSq = tuning.bezelGap*tuning.bezelGap + BABYLON.Epsilon;\n\n    // let overlapFunc = (primeL, primeLen, otherLen, line, norm, distBetween, lineArray, parseArray) => {\n    //     if(!parseArray[primeL]) {\n    //         let primeToOtherNear = Math.max(distBetween - otherLen,0) / primeLen;\n    //         let primeToOtherFar = distBetween / primeLen;\n    //         if(primeToOtherNear < 1 - BABYLON.Epsilon && primeToOtherFar > BABYLON.Epsilon) {\n    //             // kill O and replace it with any remaining line segments\n    //             //parseArray[primeL] = true;\n    //             if (primeToOtherNear > BABYLON.Epsilon) {\n    //                 lineArray.push([line[0],line[0].add(norm.scale(distBetween - otherLen))]);\n    //             }\n    //             if (primeToOtherFar < 1 - BABYLON.Epsilon) {\n    //                 lineArray.push([line[0].add(norm.scale(distBetween)), line[1]]);\n    //             }\n    //             lineArray.splice(primeL,1);\n    //         }\n    //     }\n    // }\n    // // clip any overlapping parallel lines against each other (cancel if they face each other)\n    // for( const rd of KG ) {\n    //     if(rd.id == \"key57\" || rd.id == \"key45\") {\n    //         console.log(\"found it\");\n    //         console.log(rd);\n    //     }\n    //     rd.visitedForOutline = true;\n\n    //     for( const [oId,otherRD] of Object.entries(rd.overlappingKeys) ) {\n    //         //if(otherRD.visitedForOutline) continue;\n    //         for(let iL = rd.outlineLines.length-1; iL >= 0; iL--) {\n    //             let lL = rd.outlineLines[iL];\n    //             let lDir = lL[1].subtract(lL[0]);\n    //             let lLen = lDir.length()\n    //             if(lLen < BABYLON.Epsilon) continue;\n    //             let lineNorm = lDir.normalizeFromLength(lLen);\n\n    //             for( let jL = otherRD.outlineLines.length-1; jL > 0; jL-- ) {\n    //                 let oL = otherRD.outlineLines[jL];\n    //                 let oDir = oL[1].subtract(oL[0]);\n    //                 let oLen = oDir.length();\n    //                 if(oLen < BABYLON.Epsilon ) continue;\n    //                 let oLNorm = oDir.normalizeFromLength(oLen);\n    //                 // check to see if these two are facing away from each other\n    //                 let lineDot = BABYLON.Vector3.Dot(oLNorm,lineNorm)\n    //                 if( lineDot < BABYLON.Epsilon-1 || lineDot > 1-BABYLON.Epsilon) {\n    //                     let diff = lL[0].subtract(oL[0]);\n    //                     let dd = BABYLON.Vector3.Dot(diff, oLNorm);\n    //                     let projPoint = oL[0].add(oLNorm.scale(dd))\n    //                     if( projPoint.subtract(lL[0]).lengthSquared() < maxOverlapSq) {\n    //                         if(lineDot < BABYLON.Epsilon-1) {\n    //                             // at this point, dd is the distance between the two starting points (which are facing each other) \n    //                             // erase the overlapping portion of each line\n    //                             // O ------------> olen\n    //                             //      llen <--------- L\n    //                             // O <----------------> dd\n    //                             overlapFunc(jL,oLen,lLen,oL,oLNorm,dd,otherRD.outlineLines,otherRD.parsedOutlineLines);\n    //                             overlapFunc(iL,lLen,oLen,lL,lineNorm,dd,rd.outlineLines,rd.parsedOutlineLines);\n    //                         }\n    //                         else if( lineDot > 1-BABYLON.Epsilon ) {\n    //                             if( dd > BABYLON.Epsilon ) {\n    //                                 // O -------->\n    //                                 //        L ---------->\n    //                                 // O <---> dd\n    //                                 // consume L\n    //                                 let overlapDist = oLen - dd;\n    //                                 if(!rd.parsedOutlineLines[iL]) {\n    //                                     if(overlapDist > BABYLON.Epsilon) {\n    //                                         // rd.parsedOutlineLines[iL] = true;\n    //                                         // rd.outlineLines.push([lL[0].add(lineNorm.scale(overlapDist)),lL[1]]);\n    //                                         lL[0] = lL[0].add(lineNorm.scale(overlapDist));\n    //                                     }\n    //                                 }\n    //                             }\n    //                             if( dd < BABYLON.Epsilon ) {\n    //                                 // L -------->\n    //                                 //        O ---------->\n    //                                 // L <---> -dd\n    //                                 // consume L\n    //                                 let d = -dd;\n    //                                 if(!rd.parsedOutlineLines[iL]) {\n    //                                     if(d < lLen - BABYLON.Epsilon) {\n    //                                         // rd.parsedOutlineLines[iL] = true;\n    //                                         // rd.outlineLines.push([lL[0],lL[0].add(lineNorm.scale(d))]);\n    //                                         lL[1] = lL[0].add(lineNorm.scale(d));\n    //                                     }\n    //                                 }\n    //                             }\n    //                         }\n    //                     }\n    //                 }\n\n    //                 if(rd.id == \"key45\" || otherRD.id == \"key45\") {\n    //                     console.log(`finished ${rd.id} vs ${otherRD.id}`);\n    //                     console.log(rd);\n    //                 }\n    //             }\n    //         }\n    //     }\n\n    //     if(rd.id == \"key57\" || rd.id == \"key45\") {\n    //         console.log(\"OUT\");\n    //         console.log(rd);\n    //     }\n    // }\n\n    // let dbglines = [];\n    // for( const rd of KG ) {\n    //     for(let iL = 0; iL < rd.outlineLines.length; iL++) {\n    //         dbglines.push(rd.outlineLines[iL])\n    //     }\n    // }\n    // let lineSystem = BABYLON.MeshBuilder.CreateLineSystem(\"lineSystem\", {lines: dbglines}, globals.scene);\n\n    let parsedLines = [];\n    let nextKeyRd = null;\n    let nextLineIndex = -1;\n    let invertNextLine = false;\n    // pick a line at random.  this could actually pick something on an interior island so we should probably\n    // run the loop gen algorithm until all the lines are used up and then pick the polygon with the largest area\n    for( const rd of KG ) {\n        for(let iL = 0; iL < rd.outlineLines.length; iL++) {\n            if(!rd.parsedOutlineLines[iL]) {\n                nextKeyRd = rd;\n                nextLineIndex = iL;\n                break;\n            }\n        }\n        if(nextLineIndex >= 0) break;\n    }\n    \n    let outline = [];\n    // finally, walk through the list of available outline lines and pick the closest end point for the next line\n    while(nextKeyRd != null && nextLineIndex >= 0) {\n        if(nextKeyRd.id == \"key57\") {\n            console.log(\"found it\");\n        }\n        nextKeyRd.parsedOutlineLines[nextLineIndex] = true;\n        let prevLine = nextKeyRd.outlineLines[nextLineIndex];\n        if(invertNextLine) {\n            let tmp = prevLine[0];\n            prevLine[0] = prevLine[1];\n            prevLine[1] = tmp;\n        }\n        console.log(`key rd ${nextKeyRd.id} line idx ${nextLineIndex} s ${prevLine[0]} e ${prevLine[1]}`)\n        \n        outline.push(prevLine[0]);\n\n        parsedLines.push(prevLine);\n        nextLineIndex = -1;\n        let nextDistSq = 1000000.0\n\n        let checkNext = (n,nRd,i) => {\n            let newDistSq = prevLine[1].subtract(n[0]).lengthSquared();\n            if(newDistSq < nextDistSq) {\n                nextDistSq = newDistSq;\n                nextKeyRd = nRd;\n                nextLineIndex = i;\n                invertNextLine = false;\n            }\n\n            newDistSq = prevLine[1].subtract(n[1]).lengthSquared();\n            if(newDistSq < nextDistSq) {\n                nextDistSq = newDistSq;\n                nextKeyRd = nRd;\n                nextLineIndex = i;\n                invertNextLine = true;\n            }\n        }\n        \n        for(let iL = 0; iL < nextKeyRd.outlineLines.length; iL++) {\n            if(!nextKeyRd.parsedOutlineLines[iL]) {\n                checkNext(nextKeyRd.outlineLines[iL],nextKeyRd,iL);\n            }\n        }\n\n        for( const [oId,otherRD] of Object.entries(nextKeyRd.overlappingKeys) ) {\n            for( let jL = 0; jL < otherRD.outlineLines.length; jL++ ) {\n                if(otherRD.parsedOutlineLines[jL]) continue;\n\n                checkNext(otherRD.outlineLines[jL],otherRD,jL);\n            }\n        }\n    }\n    return outline;\n}\n\n\nexport function refreshCase() {\n    const scene = globals.scene;\n    const bd = globals.boardData;\n    const kRD = globals.renderData.keys;\n    const mats = globals.renderData.mats;\n\n    if(bd.caseType == \"convex\") {\n        let kPs = [];\n        for( let [id,rd] of Object.entries(kRD) ) {\n            for( let p of rd.outline ) {\n                kPs.push(p)\n            }\n        }\n        bd.outline = coremath.convexHull2d(kPs);\n\n        if(bd.forceSymmetrical) {\n            let midPoint = (bd.layout.bounds.maxs[0] - bd.layout.bounds.mins[0]) * 0.5 + bd.layout.bounds.mins[0];\n            for(let oP of bd.outline) {\n                kPs.push(new BABYLON.Vector3(midPoint - (oP.x - midPoint), oP.y, oP.z));\n            }\n            bd.outline = coremath.convexHull2d(kPs);\n        }\n    }\n    else\n    {\n        let bounds = bd.layout.bounds;\n        bd.outline = [\n            new BABYLON.Vector3(bounds.mins[0], 0, bounds.mins[1]),\n            new BABYLON.Vector3(bounds.maxs[0], 0, bounds.mins[1]),\n            new BABYLON.Vector3(bounds.maxs[0], 0, bounds.maxs[1]),\n            new BABYLON.Vector3(bounds.mins[0], 0, bounds.maxs[1])\n        ];\n    }\n\n    let cRD = globals.renderData.case;\n\n    let cavityInnerEdge = [coremath.genArrayFromOutline(bd.outline, tuning.bezelGap, tuning.bezelCornerFillet, false)];\n    let caseFrame = coremath.genArrayFromOutline(bd.outline, tuning.bezelGap + tuning.bezelThickness, tuning.bezelThickness, false, 8);\n\n    if (cRD.edge) {\n        scene.removeMesh(cRD.edge);\n    }\n    if( tuning.drawCase ) {\n        cRD.edge = BABYLON.MeshBuilder.CreatePolygon(\"edge\", { shape: caseFrame, depth:9, holes: cavityInnerEdge, updatable: true }, scene);\n        cRD.edge.translate(new BABYLON.Vector3(0, -1.5, 0), 1, BABYLON.Space.LOCAL);\n        cRD.edge.material = mats[\"case\"];\n    }\n\n    if (cRD.bottom) {\n        scene.removeMesh(cRD.bottom);\n    }\n    if( tuning.drawCase ) {\n        cRD.bottom = BABYLON.MeshBuilder.CreatePolygon(\"bottom\", { shape: caseFrame, depth:3, updatable: true }, scene);\n        cRD.bottom.translate(new BABYLON.Vector3(0, -9-1.5, 0), 1, BABYLON.Space.LOCAL);\n        cRD.bottom.material = mats[\"case\"];\n    }\n\n\n    let keyGroups = {};\n    let bezelOutlines = [];\n    for(const [otherId, oRD] of Object.entries(kRD)) {\n        // console.log(`${otherId} is in kgid: ${oRD.keyGroupId}`);\n        if(!keyGroups[oRD.keyGroupId]) {\n            keyGroups[oRD.keyGroupId] = [];\n        }\n        keyGroups[oRD.keyGroupId].push(oRD);\n    }\n\n    for(const [kgId, KG] of Object.entries(keyGroups)) {\n        let outline = getCombinedOutlineFromRDGroup(KG);\n        bezelOutlines.push(coremath.genArrayFromOutline(outline,0.0,tuning.bezelCornerFillet,false));\n    }\n    \n    if (cRD.bezel) {\n        scene.removeMesh(cRD.bezel);\n    }\n    if( tuning.drawBezel ) {\n        cRD.bezel = BABYLON.MeshBuilder.CreatePolygon(\"bezel\", { shape: caseFrame, depth:7.5, holes: bezelOutlines }, scene);\n        cRD.bezel.translate(new BABYLON.Vector3(0, 7.5, 0), 1, BABYLON.Space.LOCAL);\n        //cRD.bezel.rotation = new BABYLON.Vector3(-Math.PI/12, 0, 0);\n        cRD.bezel.material = mats[\"case\"];\n    }\n\n    if (cRD.plate) {\n        scene.removeMesh(cRD.plate);\n    }\n\n    let switchCuts = [];\n    for(const [otherId, rd] of Object.entries(kRD)) {\n        switchCuts.push(rd.switchCut);\n    }\n    if( tuning.drawPlate ) {\n        cRD.plate = BABYLON.MeshBuilder.CreatePolygon(\"plate\", { shape: caseFrame, depth:1.5, holes: switchCuts }, scene);\n        //cRD.plate.translate()\n        cRD.plate.material = mats[\"plate\"];\n    }\n}\n\nexport function refreshKeyboard() {\n    refreshLayout();\n\n    refreshCase();\n}\n\nexport function loadKeyboard(path) {\n    fetch(path)\n        .then(response => response.json())\n        .then(data => {\n            // console.log(data);\n            let mats = globals.renderData.mats;\n\n            let bd = {};\n            bd.meta = data.meta;\n            bd.forceSymmetrical = true;\n            bd.caseType = \"convex\";\n            bd.case = data.case;\n            bd.layout = {keys: {}};\n            let kIdx = 0\n            for (let k of data.keys) {\n                k.id = \"key\" + kIdx++;\n                \n                if(!mats[k.color]) {\n                    gfx.createKeyMaterial(k.color,BABYLON.Color3.FromHexString(k.color));\n                }\n                k.matName = k.color;\n                \n                bd.layout.keys[k.id] = k;\n            }\n            globals.boardData = bd;\n            \n            gfx.createMaterials();\n            refreshKeyboard();\n            gfx.snapCamera();\n        });\n}\n","import {globals} from './globals.js'\nimport * as boardOps from './boardOps.js'\n\nexport const kbgbGUI = {\n    addButton: function(txt, action, style) {\n        style = style?style:{};\n        var button = BABYLON.GUI.Button.CreateSimpleButton(\"button\", txt);\n        button.top = \"0px\";\n        button.left = \"0px\";\n        button.width = style.width?style.width:\"60px\";\n        button.height = style.height?style.height:\".4\";\n        button.cornerRadius = 5;\n        button.thickness = 2;\n        button.children[0].color = \"#DFF9FB\";\n        button.children[0].fontSize = 24;\n        button.color = \"#FF7979\";\n        button.background = \"#EB4D4B\";\n        //button.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n    \n        button.onPointerClickObservable.add(action);\n    \n        return button;\n    },\n    addLabel: function(txt) {\n        var t = new BABYLON.GUI.TextBlock();\n        t.width = \"80px\";\n        t.height = \".9\";\n        t.text = txt;\n        t.color = \"white\";\n        t.fontSize = 24;\n        return t;\n    },\n    addKeyActionButton: function(txt, keyAction) {\n        return kbgbGUI.addButton(txt, function () {\n            for (let kId of globals.pickedKeys) {\n                let bd = globals.boardData;\n                let k = bd.layout.keys[kId];\n                keyAction(k);\n            }\n            boardOps.refreshKeyboard();\n        }); \n    },\n    modes:{\n        \"key\":{\n            add: function() {\n                //let ctrlBar = BABYLON.GUI.Control.AddHeader(control, text, size, options { isHorizontal, controlFirst }):\n                let ctrlBar = new BABYLON.GUI.StackPanel();  \n                ctrlBar.height = \".2\";\n                ctrlBar.isPointerBlocker = true;\n                ctrlBar.isVertical = false;\n                //ctrlBar.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n                ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"Pos: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`◄`, (k) => k.x -= 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`▲`, (k) => k.y -= 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`▼`, (k) => k.y += 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`►`, (k) => k.x += 0.25 ));\n            \n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"Rot: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⤹`, (k) => k.rotation_angle -= 5 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⤸`, (k) => k.rotation_angle += 5 ));\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"W: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⬌`, (k) => k.width += 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⬄`, (k) => k.width -= 0.25 ));\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"H: \"));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⬍`, (k) => k.height += 0.25 ));\n                ctrlBar.addControl(kbgbGUI.addKeyActionButton(`⇳`, (k) => k.height -= 0.25 ));\n                \n                globals.screengui.addControl(ctrlBar);\n                kbgbGUI.activeModeCtrl = ctrlBar;\n            }\n        },\n        \"case\":{\n            add: function() {\n                //let ctrlBar = BABYLON.GUI.Control.AddHeader(control, text, size, options { isHorizontal, controlFirst }):\n                let ctrlBar = new BABYLON.GUI.StackPanel();  \n                ctrlBar.height = \".2\";\n                ctrlBar.isPointerBlocker = true;\n                ctrlBar.isVertical = false;\n                ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n            \n                ctrlBar.addControl(kbgbGUI.addLabel(\"Type: \"));\n\n                var addRadio = function(text, parent) {\n\n                    var button = new BABYLON.GUI.RadioButton();\n                    button.width = \"20px\";\n                    button.height = \"20px\";\n                    button.color = \"white\";\n                    button.background = \"green\";     \n            \n                    button.onIsCheckedChangedObservable.add(function(state) {\n                        if(state) {\n                            globals.boardData.caseType = text;\n                            boardOps.refreshCase()\n                        }\n                    }); \n            \n                    var header = BABYLON.GUI.Control.AddHeader(button, text, \"100px\", { isHorizontal: true, controlFirst: true });\n                    header.height = \"30px\";\n            \n                    parent.addControl(header);    \n                }\n            \n            \n                let radioCtrl = new BABYLON.GUI.StackPanel();  \n                radioCtrl.height = \"1\";\n                radioCtrl.width = \"200px\";\n                radioCtrl.isVertical = true;\n                addRadio(\"rectangle\", radioCtrl);\n                addRadio(\"convex\", radioCtrl);\n                addRadio(\"concave\", radioCtrl);\n                ctrlBar.addControl(radioCtrl);\n\n                var checkbox = new BABYLON.GUI.Checkbox();\n                checkbox.width = \"20px\";\n                checkbox.height = \"20px\";\n                checkbox.isChecked = false;\n                checkbox.color = \"green\";\n                checkbox.onIsCheckedChangedObservable.add(function(value) {\n                    globals.boardData.forceSymmetrical = value;\n                    boardOps.refreshCase();\n                });\n\n                ctrlBar.addControl(kbgbGUI.addLabel(\"SYM: \"));\n                ctrlBar.addControl(checkbox);\n\n                globals.screengui.addControl(ctrlBar);\n                kbgbGUI.activeModeCtrl = ctrlBar;\n            }\n        },\n        \"details\":{\n            add: function() {\n                //let ctrlBar = BABYLON.GUI.Control.AddHeader(control, text, size, options { isHorizontal, controlFirst }):\n                let ctrlBar = new BABYLON.GUI.StackPanel();  \n                ctrlBar.height = \".2\";\n                ctrlBar.isPointerBlocker = true;\n                ctrlBar.isVertical = false;\n                //ctrlBar.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n                ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n            \n                let txt = kbgbGUI.addLabel(\"WORK IN PROGRESS.  Press 'r' to cycle keyboards, press 'k', 'b', 'p' and 'c' to toggle rendering of stuff\");\n\n                txt.width = \"1200px\";\n                ctrlBar.addControl(txt);\n                \n                globals.screengui.addControl(ctrlBar);\n                kbgbGUI.activeModeCtrl = ctrlBar;\n            }\n        },\n    },\n    setGUIMode: function(mode) {\n        if(kbgbGUI.activeModeCtrl) {\n            globals.screengui.removeControl(kbgbGUI.activeModeCtrl);\n        }\n        if(kbgbGUI.modes[mode]) {\n            kbgbGUI.modes[mode].add();\n        }\n    },\n    addModeGUI: function() {\n        let ctrlBar = new BABYLON.GUI.StackPanel();  \n        ctrlBar.height = \".1\";\n        ctrlBar.isPointerBlocker = true;\n        ctrlBar.isVertical = false;\n        //ctrlBar.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n        ctrlBar.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;\n\n        ctrlBar.addControl(kbgbGUI.addButton(\"layout\", () => {kbgbGUI.setGUIMode(\"key\")}, {height:\"1\",width:\"120px\"}));\n        ctrlBar.addControl(kbgbGUI.addButton(\"case\", () => {kbgbGUI.setGUIMode(\"case\")}, {height:\"1\",width:\"120px\"}));\n        ctrlBar.addControl(kbgbGUI.addButton(\"pcb\", () => {kbgbGUI.setGUIMode(\"pcb\")}, {height:\"1\",width:\"120px\"}));\n        ctrlBar.addControl(kbgbGUI.addButton(\"deets\", () => {kbgbGUI.setGUIMode(\"details\")}, {height:\"1\",width:\"120px\"}));\n\n        kbgbGUI.modeCtrl = ctrlBar;\n        globals.screengui.addControl(ctrlBar);\n    }\n}","import {globals} from './globals.js'\nimport {tuning} from './tuning.js'\nimport {kbgbGUI} from './ui.js'\nimport * as boardOps from './boardOps.js'\nimport * as gfx from './gfx.js'\n\nfunction initKBGB() {\n    gfx.init();\n\n    globals.screengui = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"screenUI\");\n\n    kbgbGUI.addModeGUI();\n\n    // run the render loop\n    globals.engine.runRenderLoop(function () {\n        globals.scene.render();\n    });\n\n\n    let keyboards = [\n        'testkbs/hy_nova.kle',\n        'testkbs/ansi104.kle',\n        'testkbs/fc660m.kle',\n        'testkbs/kle_atreus.kle',\n        'testkbs/basis-mono.kle',\n        'testkbs/basis-stagger-3.kle',\n        'testkbs/kle-ergodox.kle',\n        'testkbs/foggy_sp_knobs.kle',\n        'testkbs/reddit-9d-ortho.kle',\n        'testkbs/onekey.kle',\n        'testkbs/twokey.kle',\n        'testkbs/threekey.kle',\n        'testkbs/threekeyoffset.kle',\n    ]\n    let kbdidx = 4;\n\n    // load a keyboard\n    boardOps.loadKeyboard(keyboards[kbdidx]);\n\n    // the canvas/window resize event handler\n    window.addEventListener('resize', function () {\n        globals.engine.resize();\n    });\n\n    window.addEventListener('keydown', event => {\n        if( event.key == 'i' ) {\n            if(globals.scene.debugLayer.isVisible()) {\n                globals.scene.debugLayer.hide();\n            } else {\n                globals.scene.debugLayer.show();\n            }\n        }\n        if( event.key == 'k' ) {\n            tuning.keyShape = tuning.keyShape?null:\"square\";\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'c' ) {\n            tuning.drawCase = tuning.drawCase?false:true;\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'p' ) {\n            tuning.drawPlate = tuning.drawPlate?false:true;\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'b' ) {\n            tuning.drawBezel = tuning.drawBezel?false:true;\n            boardOps.refreshKeyboard();\n        }\n        if( event.key == 'r' ) {\n            kbdidx = (kbdidx+1)%keyboards.length;\n            boardOps.loadKeyboard(keyboards[kbdidx]);\n        }\n    })\n}\n\nwindow.addEventListener('DOMContentLoaded', function () {\n    initKBGB();\n});\n\n\n\n//When click event is raised\nwindow.addEventListener(\"click\", function (e) {\n    const scene = globals.scene;\n    var pickResult = scene.pick(scene.pointerX, scene.pointerY);\n    //console.log(pickResult);\n    if (pickResult && pickResult.pickedMesh) {\n        if (globals.boardData.layout.keys[pickResult.pickedMesh.name]) {\n            let pickedKeys = globals.pickedKeys;\n            if (e.metaKey || e.ctrlKey) {\n                if (globals.pickedKeys.indexOf(pickResult.pickedMesh.name) > 0) {\n                    globals.pickedKeys.splice(globals.pickedKeys.indexOf(pickResult.pickedMesh.name), 1)\n                }\n                else {\n                    globals.pickedKeys.push(pickResult.pickedMesh.name)\n                }\n            }\n            else {\n                globals.pickedKeys = [pickResult.pickedMesh.name];\n            }\n            console.log(\"picked key \" + pickResult.pickedMesh.name)\n            boardOps.refreshOutlines();\n        }\n    }\n});"],"names":["globals","pickedKeys","renderData","keys","case","mats","outlines","tuning","keyDims","switchCutout","base1U","bezelGap","bezelThickness","bezelCornerFillet","keyShape","drawCase","drawBezel","drawPlate","lineLineIntersection","p0","d0","p1","d1","det","x","z","BABYLON","Epsilon","prevC","nextC","Vector3","rayToSegment","x0","xL","xNorm","y0","y1","yL","subtract","intersection","normalize","intLenSq","lengthSquared","isPointInPoly","p","poly","i","length","point","nextDir","nextNorm","pV","Dot","getRotFromNormal","norm","t","Math","acos","PI","orient","a","b","c","s","l","r","tol","convexHull2d","points","n","result","Array","sorted","sort","d","lower","upper","idx","m","pop","push","ptr","nl","j","pList","unshift","genArrayFromOutline","outline","offset","fillets","close","segments","outPoints","next","prev","prevDir","prevNorm","inPoint","add","scale","outPoint","fillet","filletCenter","startRot","endRot","rotStep","rot","cos","sin","createKeyMaterial","name","color","PBRMetallicRoughnessMaterial","scene","metallic","roughness","baseColor","environmentTexture","hdrTexture","init","canvas","document","getElementById","engine","Engine","Scene","camera","ArcRotateCamera","setTarget","Zero","attachControl","CubeTexture","CreateFromPrefilteredData","currentSkybox","createDefaultSkybox","activeCamera","maxZ","minZ","createScene","refreshOutlines","kRD","oRD","k","o","Object","entries","removeMesh","id","rd","MeshBuilder","CreateRibbon","pathArray","coremath.genArrayFromOutline","material","translate","Space","LOCAL","console","log","getCombinedOutlineFromRDGroup","KG","outlineLines","parsedOutlineLines","bezelHole","lStart","lEnd","oId","otherRD","overlappingKeys","iL","lL","lNorm","isStartInPoly","coremath.isPointInPoly","isEndInPoly","splice","minExitT","bestIntersection","iOP","coremath.rayToSegment","revLine","revNorm","nextKeyRd","nextLineIndex","invertNextLine","prevLine","tmp","nextDistSq","checkNext","nRd","newDistSq","jL","refreshCase","bd","boardData","caseType","kPs","coremath.convexHull2d","forceSymmetrical","midPoint","layout","bounds","maxs","mins","oP","y","cRD","cavityInnerEdge","caseFrame","edge","CreatePolygon","shape","depth","holes","updatable","bottom","keyGroups","bezelOutlines","otherId","keyGroupId","kgId","bezel","plate","switchCuts","switchCut","refreshKeyboard","bezelHoles","keycap","kgID","bezelMins","bezelMaxs","keycapDim","width","height","kPos","kXform","Matrix","Identity","multiply","Translation","rotation_angle","rotation_x","rotation_y","RotationY","TransformCoordinates","switchCutDims","matName","min","max","checkOverlap","k1","rd1","k2","rd2","checkIntersection","pRD","iP","line","allLess","allMore","dot","confirmedIntersection","pKG","oKG","refreshLayout","loadKeyboard","path","fetch","then","response","json","data","meta","kIdx","gfx.createKeyMaterial","Color3","FromHexString","StandardMaterial","diffuseColor","emissiveColor","specularColor","caseMatName","plateMatName","gfx.createMaterials","alpha","beta","radius","gfx.snapCamera","kbgbGUI","addButton","txt","action","style","button","GUI","Button","CreateSimpleButton","top","left","cornerRadius","thickness","children","fontSize","background","onPointerClickObservable","addLabel","TextBlock","text","addKeyActionButton","keyAction","kId","boardOps.refreshKeyboard","modes","key","ctrlBar","StackPanel","isPointerBlocker","isVertical","verticalAlignment","Control","VERTICAL_ALIGNMENT_BOTTOM","addControl","screengui","activeModeCtrl","addRadio","parent","RadioButton","onIsCheckedChangedObservable","state","boardOps.refreshCase","header","AddHeader","isHorizontal","controlFirst","radioCtrl","checkbox","Checkbox","isChecked","value","details","setGUIMode","mode","removeControl","addModeGUI","VERTICAL_ALIGNMENT_TOP","modeCtrl","window","addEventListener","gfx.init","AdvancedDynamicTexture","CreateFullscreenUI","runRenderLoop","render","keyboards","kbdidx","boardOps.loadKeyboard","resize","event","debugLayer","isVisible","hide","show","initKBGB","e","pickResult","pick","pointerX","pointerY","pickedMesh","metaKey","ctrlKey","indexOf","boardOps.refreshOutlines"],"mappings":"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"}